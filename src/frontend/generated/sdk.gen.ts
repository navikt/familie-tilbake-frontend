// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import type {
    AngreSammenslåingData,
    AngreSammenslåingResponses,
    AngreSendTilBeslutterData,
    AngreSendTilBeslutterResponses,
    AnnulerKravgrunnlagData,
    AnnulerKravgrunnlagResponses,
    ArkiverMottattKravgrunnlagData,
    ArkiverMottattKravgrunnlagResponses,
    BeregnBeløpData,
    BeregnBeløpResponses,
    BestillBrevData,
    BestillBrevResponses,
    ByttEnhetData,
    ByttEnhetResponses,
    ErPerioderLikeData,
    ErPerioderLikeResponses,
    ErPerioderSammenslåttData,
    ErPerioderSammenslåttResponses,
    FeatureTogglesData,
    FeatureTogglesResponses,
    FerdigstillGodkjenneVedtakOppgaveOgOpprettBehandleSakOppgaveData,
    FerdigstillGodkjenneVedtakOppgaveOgOpprettBehandleSakOppgaveResponses,
    FerdigstillOppgaverForBehandlingData,
    FerdigstillOppgaverForBehandlingResponses,
    FinnBehandlingerMedGodkjennVedtakOppgaveSomSkulleHattBehandleSakOppgaveData,
    FinnBehandlingerMedGodkjennVedtakOppgaveSomSkulleHattBehandleSakOppgaveResponses,
    FinnesÅpenTilbakekrevingsbehandlingData,
    FinnesÅpenTilbakekrevingsbehandlingResponses,
    FinnGamleÅpneBehandlingerUtenOppgaveData,
    FinnGamleÅpneBehandlingerUtenOppgaveResponses,
    FjernBrevmottakerStegData,
    FjernBrevmottakerStegResponses,
    FjernManuellBrevmottakerData,
    FjernManuellBrevmottakerResponses,
    FjernVergeData,
    FjernVergeResponses,
    FlyttBehandlingTilFakta1Data,
    FlyttBehandlingTilFakta1Responses,
    FlyttBehandlingTilFaktaData,
    FlyttBehandlingTilFaktaResponses,
    ForhåndsvisBrevData,
    ForhåndsvisBrevResponses,
    HenleggBehandlingData,
    HenleggBehandlingResponses,
    HentBehandlingData,
    HentBehandlingerForFagsystemData,
    HentBehandlingerForFagsystemResponses,
    HentBehandlingResponses,
    HentBeregningsresultatData,
    HentBeregningsresultatResponses,
    HentDokumentData,
    HentDokumentResponses,
    HentFagsakData,
    HentFagsakResponses,
    HentFaktaomfeilutbetalingData,
    HentFaktaomfeilutbetalingResponses,
    HentForvaltningsinfoData,
    HentForvaltningsinfoResponses,
    HentHistorikkinnslagData,
    HentHistorikkinnslagResponses,
    HentInaktivFaktaomfeilutbetalingData,
    HentInaktivFaktaomfeilutbetalingResponses,
    HentInfoData,
    HentInfoResponses,
    HentJournalposterData,
    HentJournalposterResponses,
    HentKravgrunnlagsinfoData,
    HentKravgrunnlagsinfoResponses,
    HentManuellBrevmottakereData,
    HentManuellBrevmottakereResponses,
    HentTotrinnsvurderingerData,
    HentTotrinnsvurderingerResponses,
    HentUrlTilArbeidOgInntektData,
    HentUrlTilArbeidOgInntektResponses,
    HentVedtakForFagsystemData,
    HentVedtakForFagsystemResponses,
    HentVedtaksbrevtekstData,
    HentVedtaksbrevtekstResponses,
    HentVergeData,
    HentVergeResponses,
    HentVurdertForeldelseData,
    HentVurdertForeldelseResponses,
    KanBehandlingOpprettesManueltData,
    KanBehandlingOpprettesManueltResponses,
    KorrigerKravgrunnlag1Data,
    KorrigerKravgrunnlag1Responses,
    KorrigerKravgrunnlagData,
    KorrigerKravgrunnlagResponses,
    LagOppdaterOppgaveTaskForBehandlingData,
    LagOppdaterOppgaveTaskForBehandlingResponses,
    LagreUtkastVedtaksbrevData,
    LagreUtkastVedtaksbrevResponses,
    LeggTilBrevmottakerData,
    LeggTilBrevmottakerResponses,
    OppdaterManuellBrevmottakerData,
    OppdaterManuellBrevmottakerResponses,
    OpprettBehandlingData,
    OpprettBehandlingManuellTaskData,
    OpprettBehandlingManuellTaskResponses,
    OpprettBehandlingResponses,
    OpprettBrevmottakerStegData,
    OpprettBrevmottakerStegResponses,
    OpprettRevurderingData,
    OpprettRevurderingResponses,
    OpprettVergeStegData,
    OpprettVergeStegResponses,
    SammenslåData,
    SammenslåResponses,
    SendSisteTilstandForBehandlingerTilDvhData,
    SendSisteTilstandForBehandlingerTilDvhResponses,
    SettIverksettStegTilUtførtOgFortsettData,
    SettIverksettStegTilUtførtOgFortsettResponses,
    SimulerMottakAvKravgrunnlagData,
    SimulerMottakAvKravgrunnlagResponses,
    TaBehandlingAvVentData,
    TaBehandlingAvVentResponses,
    TvingHenleggBehandlingData,
    TvingHenleggBehandlingResponses,
} from './types.gen';

import { client } from './client.gen';

export type Options<
    TData extends TDataShape = TDataShape,
    ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Tvinghenlegg behandling
 */
export const tvingHenleggBehandling = <ThrowOnError extends boolean = false>(
    options: Options<TvingHenleggBehandlingData, ThrowOnError>
) => {
    return (options.client ?? client).put<TvingHenleggBehandlingResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/forvaltning/behandling/{behandlingId}/tving-henleggelse/v1',
        ...options,
    });
};

/**
 * Hent korrigert kravgrunnlag
 */
export const korrigerKravgrunnlag = <ThrowOnError extends boolean = false>(
    options: Options<KorrigerKravgrunnlagData, ThrowOnError>
) => {
    return (options.client ?? client).put<KorrigerKravgrunnlagResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/forvaltning/behandling/{behandlingId}/kravgrunnlag/{eksternKravgrunnlagId}/v1',
        ...options,
    });
};

/**
 * Hent korrigert kravgrunnlag
 */
export const korrigerKravgrunnlag1 = <ThrowOnError extends boolean = false>(
    options: Options<KorrigerKravgrunnlag1Data, ThrowOnError>
) => {
    return (options.client ?? client).put<KorrigerKravgrunnlag1Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/forvaltning/behandling/{behandlingId}/kravgrunnlag/v1',
        ...options,
    });
};

/**
 * Flytt behandling tilbake til fakta
 */
export const flyttBehandlingTilFakta = <ThrowOnError extends boolean = false>(
    options: Options<FlyttBehandlingTilFaktaData, ThrowOnError>
) => {
    return (options.client ?? client).put<FlyttBehandlingTilFaktaResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/forvaltning/behandling/{behandlingId}/flytt-behandling/v1',
        ...options,
    });
};

/**
 * Arkiver mottatt kravgrunnlag
 */
export const arkiverMottattKravgrunnlag = <ThrowOnError extends boolean = false>(
    options: Options<ArkiverMottattKravgrunnlagData, ThrowOnError>
) => {
    return (options.client ?? client).put<
        ArkiverMottattKravgrunnlagResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/forvaltning/arkiver/kravgrunnlag/{mottattXmlId}/v1',
        ...options,
    });
};

/**
 * Annuler kravgrunnlag
 */
export const annulerKravgrunnlag = <ThrowOnError extends boolean = false>(
    options: Options<AnnulerKravgrunnlagData, ThrowOnError>
) => {
    return (options.client ?? client).put<AnnulerKravgrunnlagResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/forvaltning/annuler/kravgrunnlag/{eksternKravgrunnlagId}/v1',
        ...options,
    });
};

/**
 * Fjerner manuell brevmottaker
 */
export const fjernManuellBrevmottaker = <ThrowOnError extends boolean = false>(
    options: Options<FjernManuellBrevmottakerData, ThrowOnError>
) => {
    return (options.client ?? client).delete<
        FjernManuellBrevmottakerResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/brevmottaker/manuell/{behandlingId}/{manuellBrevmottakerId}',
        ...options,
    });
};

/**
 * Oppdaterer manuell brevmottaker
 */
export const oppdaterManuellBrevmottaker = <ThrowOnError extends boolean = false>(
    options: Options<OppdaterManuellBrevmottakerData, ThrowOnError>
) => {
    return (options.client ?? client).put<
        OppdaterManuellBrevmottakerResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/brevmottaker/manuell/{behandlingId}/{manuellBrevmottakerId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Fjern manuelle brevmottakere og deaktiver steg
 */
export const fjernBrevmottakerSteg = <ThrowOnError extends boolean = false>(
    options: Options<FjernBrevmottakerStegData, ThrowOnError>
) => {
    return (options.client ?? client).put<FjernBrevmottakerStegResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/brevmottaker/manuell/{behandlingId}/deaktiver',
        ...options,
    });
};

/**
 * Henlegg behandling
 */
export const henleggBehandling = <ThrowOnError extends boolean = false>(
    options: Options<HenleggBehandlingData, ThrowOnError>
) => {
    return (options.client ?? client).put<HenleggBehandlingResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/behandling/{behandlingId}/henlegg/v1',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Ta behandling av vent
 */
export const taBehandlingAvVent = <ThrowOnError extends boolean = false>(
    options: Options<TaBehandlingAvVentData, ThrowOnError>
) => {
    return (options.client ?? client).put<TaBehandlingAvVentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/behandling/{behandlingId}/gjenoppta/v1',
        ...options,
    });
};

/**
 * Flytt behandling tilbake til fakta
 */
export const flyttBehandlingTilFakta1 = <ThrowOnError extends boolean = false>(
    options: Options<FlyttBehandlingTilFakta1Data, ThrowOnError>
) => {
    return (options.client ?? client).put<FlyttBehandlingTilFakta1Responses, unknown, ThrowOnError>(
        {
            security: [
                {
                    scheme: 'bearer',
                    type: 'http',
                },
            ],
            url: '/api/behandling/{behandlingId}/flytt-behandling-til-fakta',
            ...options,
        }
    );
};

/**
 * Bytt enhet
 */
export const byttEnhet = <ThrowOnError extends boolean = false>(
    options: Options<ByttEnhetData, ThrowOnError>
) => {
    return (options.client ?? client).put<ByttEnhetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/behandling/{behandlingId}/bytt-enhet/v1',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Angre send til beslutter
 */
export const angreSendTilBeslutter = <ThrowOnError extends boolean = false>(
    options: Options<AngreSendTilBeslutterData, ThrowOnError>
) => {
    return (options.client ?? client).put<AngreSendTilBeslutterResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/behandling/{behandlingId}/angre-send-til-beslutter',
        ...options,
    });
};

/**
 * Hent verge
 */
export const hentVerge = <ThrowOnError extends boolean = false>(
    options: Options<HentVergeData, ThrowOnError>
) => {
    return (options.client ?? client).get<HentVergeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/behandling/v1/{behandlingId}/verge',
        ...options,
    });
};

/**
 * Opprett verge steg på behandling
 */
export const opprettVergeSteg = <ThrowOnError extends boolean = false>(
    options: Options<OpprettVergeStegData, ThrowOnError>
) => {
    return (options.client ?? client).post<OpprettVergeStegResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/behandling/v1/{behandlingId}/verge',
        ...options,
    });
};

/**
 * Fjern verge
 */
export const fjernVerge = <ThrowOnError extends boolean = false>(
    options: Options<FjernVergeData, ThrowOnError>
) => {
    return (options.client ?? client).put<FjernVergeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/behandling/v1/{behandlingId}/verge',
        ...options,
    });
};

/**
 * Oppdatere skalSammenslåPerioder
 */
export const sammenslå = <ThrowOnError extends boolean = false>(
    options: Options<SammenslåData, ThrowOnError>
) => {
    return (options.client ?? client).post<SammenslåResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/perioder/sammensla/{behandlingId}',
        ...options,
    });
};

/**
 * Angre sammenslå av perioder
 */
export const angreSammenslåing = <ThrowOnError extends boolean = false>(
    options: Options<AngreSammenslåingData, ThrowOnError>
) => {
    return (options.client ?? client).post<AngreSammenslåingResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/perioder/angre-sammenslaing/{behandlingId}',
        ...options,
    });
};

/**
 * Manuellt ufører iverksettingssteget uten å sende til oppdrag
 */
export const settIverksettStegTilUtførtOgFortsett = <ThrowOnError extends boolean = false>(
    options: Options<SettIverksettStegTilUtførtOgFortsettData, ThrowOnError>
) => {
    return (options.client ?? client).post<
        SettIverksettStegTilUtførtOgFortsettResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/forvaltning/settiverksettingTilUtfort/{taskId}/behandling/{behandlingId}',
        ...options,
    });
};

/**
 * Send siste tilstand for behandling til DVH
 */
export const sendSisteTilstandForBehandlingerTilDvh = <ThrowOnError extends boolean = false>(
    options: Options<SendSisteTilstandForBehandlingerTilDvhData, ThrowOnError>
) => {
    return (options.client ?? client).post<
        SendSisteTilstandForBehandlingerTilDvhResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/forvaltning/sendTilstandTilDVH',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Lag oppdaterOppgaveTask for behandling
 */
export const lagOppdaterOppgaveTaskForBehandling = <ThrowOnError extends boolean = false>(
    options: Options<LagOppdaterOppgaveTaskForBehandlingData, ThrowOnError>
) => {
    return (options.client ?? client).post<
        LagOppdaterOppgaveTaskForBehandlingResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/forvaltning/lagOppdaterOppgaveTask',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Oppretter FinnGammelBehandlingUtenOppgaveTask som logger ut gamle behandlinger uten åpen oppgave
 */
export const finnGamleÅpneBehandlingerUtenOppgave = <ThrowOnError extends boolean = false>(
    options: Options<FinnGamleÅpneBehandlingerUtenOppgaveData, ThrowOnError>
) => {
    return (options.client ?? client).post<
        FinnGamleÅpneBehandlingerUtenOppgaveResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/forvaltning/hentBehandlingerUtenOppgave/fagsystem/{fagsystem}',
        ...options,
    });
};

/**
 * Ferdigstiller åpen oppgave som skulle vært lukket i en behandling
 */
export const ferdigstillOppgaverForBehandling = <ThrowOnError extends boolean = false>(
    options: Options<FerdigstillOppgaverForBehandlingData, ThrowOnError>
) => {
    return (options.client ?? client).post<
        FerdigstillOppgaverForBehandlingResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/forvaltning/ferdigstillOppgaverForBehandling/{behandlingId}/{oppgaveType}',
        ...options,
    });
};

/**
 * Ferdigstiller åpen GodkjenneVedtak-oppgave og oppretter BehandleSak-oppgave for behandlinger
 */
export const ferdigstillGodkjenneVedtakOppgaveOgOpprettBehandleSakOppgave = <
    ThrowOnError extends boolean = false,
>(
    options: Options<FerdigstillGodkjenneVedtakOppgaveOgOpprettBehandleSakOppgaveData, ThrowOnError>
) => {
    return (options.client ?? client).post<
        FerdigstillGodkjenneVedtakOppgaveOgOpprettBehandleSakOppgaveResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/forvaltning/ferdigstillGodkjenneVedtakOppgaveOgOpprettBehandleSakOppgave',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Legg inn test-kravgrunnlag - KUN PREPROD/DEV!
 *
 * Legg inn behandlingId (intern id) fra tilbakekrevingsbehandlingen (ikke eksternid fra url).
 *
 * Legg inn et kravgrunnlag du vil bruke.
 *
 * Kopier et eksisterende kravgrunnlag og bytt ut MINIMUM:
 *
 * - fagsystemId (ekstern fagsakId - long)
 *
 * - referanse (ekstern behandlingId - long)
 *
 * Dette er eksternider fra vedtaksløsning som f.eks. ef-sak eller ba-sak.
 *
 * Endre personident i kravgrunnlag, med feltnavn: typeGjelderId og typeUtbetId
 *
 * Det vil ikke fungere å iverksette mot økonomi, men du kan bruke forvaltningsendepunkt: "settIverksettingUtfort" - da lages brev og behandlingen settes til AVSLUTTET. settIverksettingUtfort tar taskId og behandlingId (intern i familie-tilbake) som parameter. TaskId kan finnes på task i prosessering, tasken heter SendØkonomiVedtak og vil være ha status som klar til plukk eller feilet.
 */
export const simulerMottakAvKravgrunnlag = <ThrowOnError extends boolean = false>(
    options: Options<SimulerMottakAvKravgrunnlagData, ThrowOnError>
) => {
    return (options.client ?? client).post<
        SimulerMottakAvKravgrunnlagResponses,
        unknown,
        ThrowOnError
    >({
        bodySerializer: null,
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/forvaltning/behandling/{behandlingId}/kravgrunnlag/testkravgrunnlag',
        ...options,
        headers: {
            'Content-Type': 'text/xml',
            ...options.headers,
        },
    });
};

/**
 * Lagre utkast av vedtaksbrev
 */
export const lagreUtkastVedtaksbrev = <ThrowOnError extends boolean = false>(
    options: Options<LagreUtkastVedtaksbrevData, ThrowOnError>
) => {
    return (options.client ?? client).post<LagreUtkastVedtaksbrevResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/dokument/vedtaksbrevtekst/{behandlingId}/utkast',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Forhåndsvis brev
 */
export const forhåndsvisBrev = <ThrowOnError extends boolean = false>(
    options: Options<ForhåndsvisBrevData, ThrowOnError>
) => {
    return (options.client ?? client).post<ForhåndsvisBrevResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/dokument/forhandsvis',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Bestill brevsending
 */
export const bestillBrev = <ThrowOnError extends boolean = false>(
    options: Options<BestillBrevData, ThrowOnError>
) => {
    return (options.client ?? client).post<BestillBrevResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/dokument/bestill',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Henter manuell brevmottakere
 */
export const hentManuellBrevmottakere = <ThrowOnError extends boolean = false>(
    options: Options<HentManuellBrevmottakereData, ThrowOnError>
) => {
    return (options.client ?? client).get<HentManuellBrevmottakereResponses, unknown, ThrowOnError>(
        {
            security: [
                {
                    scheme: 'bearer',
                    type: 'http',
                },
            ],
            url: '/api/brevmottaker/manuell/{behandlingId}',
            ...options,
        }
    );
};

/**
 * Legger til brevmottaker manuelt
 */
export const leggTilBrevmottaker = <ThrowOnError extends boolean = false>(
    options: Options<LeggTilBrevmottakerData, ThrowOnError>
) => {
    return (options.client ?? client).post<LeggTilBrevmottakerResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/brevmottaker/manuell/{behandlingId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Opprett og aktiver brevmottaker-steg på behandling
 */
export const opprettBrevmottakerSteg = <ThrowOnError extends boolean = false>(
    options: Options<OpprettBrevmottakerStegData, ThrowOnError>
) => {
    return (options.client ?? client).post<OpprettBrevmottakerStegResponses, unknown, ThrowOnError>(
        {
            security: [
                {
                    scheme: 'bearer',
                    type: 'http',
                },
            ],
            url: '/api/brevmottaker/manuell/{behandlingId}/aktiver',
            ...options,
        }
    );
};

/**
 * Beregn feilutbetalt beløp for nye delte perioder
 */
export const beregnBeløp = <ThrowOnError extends boolean = false>(
    options: Options<BeregnBeløpData, ThrowOnError>
) => {
    return (options.client ?? client).post<BeregnBeløpResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/behandling/{behandlingId}/beregn/v1',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Opprett tilbakekrevingsbehandling automatisk, kan kalles av fagsystem, batch
 */
export const opprettBehandling = <ThrowOnError extends boolean = false>(
    options: Options<OpprettBehandlingData, ThrowOnError>
) => {
    return (options.client ?? client).post<OpprettBehandlingResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/behandling/v1',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Opprett tilbakekrevingsrevurdering
 */
export const opprettRevurdering = <ThrowOnError extends boolean = false>(
    options: Options<OpprettRevurderingData, ThrowOnError>
) => {
    return (options.client ?? client).post<OpprettRevurderingResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/behandling/revurdering/v1',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Opprett tilbakekrevingsbehandling manuelt
 */
export const opprettBehandlingManuellTask = <ThrowOnError extends boolean = false>(
    options: Options<OpprettBehandlingManuellTaskData, ThrowOnError>
) => {
    return (options.client ?? client).post<
        OpprettBehandlingManuellTaskResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/behandling/manuelt/task/v1',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Sjekk om det er mulig å opprette behandling manuelt
 */
export const kanBehandlingOpprettesManuelt = <ThrowOnError extends boolean = false>(
    options: Options<KanBehandlingOpprettesManueltData, ThrowOnError>
) => {
    return (options.client ?? client).get<
        KanBehandlingOpprettesManueltResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/ytelsestype/{ytelsestype}/fagsak/{eksternFagsakId}/kanBehandlingOpprettesManuelt/v1',
        ...options,
    });
};

/**
 * Sjekker om perioder er like - unntatt dato og beløp
 */
export const erPerioderLike = <ThrowOnError extends boolean = false>(
    options: Options<ErPerioderLikeData, ThrowOnError>
) => {
    return (options.client ?? client).get<ErPerioderLikeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/perioder/sjekk-likhet/{behandlingId}',
        ...options,
    });
};

/**
 * Sjekker om perioder er sammenslått
 */
export const erPerioderSammenslått = <ThrowOnError extends boolean = false>(
    options: Options<ErPerioderSammenslåttData, ThrowOnError>
) => {
    return (options.client ?? client).get<ErPerioderSammenslåttResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/perioder/hent-sammenslatt/{behandlingId}',
        ...options,
    });
};

/**
 * Hent applikasjonsinformasjon
 */
export const hentInfo = <ThrowOnError extends boolean = false>(
    options?: Options<HentInfoData, ThrowOnError>
) => {
    return (options?.client ?? client).get<HentInfoResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/info',
        ...options,
    });
};

/**
 * Hent informasjon som kreves for forvaltning
 */
export const hentForvaltningsinfo = <ThrowOnError extends boolean = false>(
    options: Options<HentForvaltningsinfoData, ThrowOnError>
) => {
    return (options.client ?? client).get<HentForvaltningsinfoResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/forvaltning/ytelsestype/{ytelsestype}/fagsak/{eksternFagsakId}/v1',
        ...options,
    });
};

/**
 * Hent ikke arkiverte kravgrunnlag
 */
export const hentKravgrunnlagsinfo = <ThrowOnError extends boolean = false>(
    options: Options<HentKravgrunnlagsinfoData, ThrowOnError>
) => {
    return (options.client ?? client).get<HentKravgrunnlagsinfoResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/forvaltning/ytelsestype/{ytelsestype}/fagsak/{eksternFagsakId}/ikke-arkivert-kravgrunnlag',
        ...options,
    });
};

/**
 * Henter behandlinger med åpen GodkjennVedtak-oppgave eller ingen oppgave, som burde hatt åpen BehandleSak-oppgave
 */
export const finnBehandlingerMedGodkjennVedtakOppgaveSomSkulleHattBehandleSakOppgave = <
    ThrowOnError extends boolean = false,
>(
    options: Options<
        FinnBehandlingerMedGodkjennVedtakOppgaveSomSkulleHattBehandleSakOppgaveData,
        ThrowOnError
    >
) => {
    return (options.client ?? client).get<
        FinnBehandlingerMedGodkjennVedtakOppgaveSomSkulleHattBehandleSakOppgaveResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/forvaltning/finnBehandlingerMedGodkjennVedtakOppgaveSomSkulleHattBehandleSakOppgave/{fagsystem}',
        ...options,
    });
};

export const featureToggles = <ThrowOnError extends boolean = false>(
    options?: Options<FeatureTogglesData, ThrowOnError>
) => {
    return (options?.client ?? client).get<FeatureTogglesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/featuretoggle',
        ...options,
    });
};

/**
 * Hent behandlinger, kalles av fagsystem
 */
export const hentVedtakForFagsystem = <ThrowOnError extends boolean = false>(
    options: Options<HentVedtakForFagsystemData, ThrowOnError>
) => {
    return (options.client ?? client).get<HentVedtakForFagsystemResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/fagsystem/{fagsystem}/fagsak/{eksternFagsakId}/vedtak/v1',
        ...options,
    });
};

/**
 * Hent fagsak informasjon med bruker og behandlinger
 */
export const hentFagsak = <ThrowOnError extends boolean = false>(
    options: Options<HentFagsakData, ThrowOnError>
) => {
    return (options.client ?? client).get<HentFagsakResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/fagsystem/{fagsystem}/fagsak/{eksternFagsakId}/v1',
        ...options,
    });
};

/**
 * Sjekk om det finnes en åpen tilbakekrevingsbehandling
 */
export const finnesÅpenTilbakekrevingsbehandling = <ThrowOnError extends boolean = false>(
    options: Options<FinnesÅpenTilbakekrevingsbehandlingData, ThrowOnError>
) => {
    return (options.client ?? client).get<
        FinnesÅpenTilbakekrevingsbehandlingResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/fagsystem/{fagsystem}/fagsak/{eksternFagsakId}/finnesApenBehandling/v1',
        ...options,
    });
};

/**
 * Hent behandlinger, kalles av fagsystem
 */
export const hentBehandlingerForFagsystem = <ThrowOnError extends boolean = false>(
    options: Options<HentBehandlingerForFagsystemData, ThrowOnError>
) => {
    return (options.client ?? client).get<
        HentBehandlingerForFagsystemResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/fagsystem/{fagsystem}/fagsak/{eksternFagsakId}/behandlinger/v1',
        ...options,
    });
};

/**
 * Hent vedtaksbrevtekst
 */
export const hentVedtaksbrevtekst = <ThrowOnError extends boolean = false>(
    options: Options<HentVedtaksbrevtekstData, ThrowOnError>
) => {
    return (options.client ?? client).get<HentVedtaksbrevtekstResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/dokument/vedtaksbrevtekst/{behandlingId}',
        ...options,
    });
};

export const hentUrlTilArbeidOgInntekt = <ThrowOnError extends boolean = false>(
    options: Options<HentUrlTilArbeidOgInntektData, ThrowOnError>
) => {
    return (options.client ?? client).get<
        HentUrlTilArbeidOgInntektResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/brukerlenke',
        ...options,
    });
};

export const hentHistorikkinnslag = <ThrowOnError extends boolean = false>(
    options: Options<HentHistorikkinnslagData, ThrowOnError>
) => {
    return (options.client ?? client).get<HentHistorikkinnslagResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/behandlinger/{behandlingId}/historikk',
        ...options,
    });
};

/**
 * Hent totrinnsvurderinger
 */
export const hentTotrinnsvurderinger = <ThrowOnError extends boolean = false>(
    options: Options<HentTotrinnsvurderingerData, ThrowOnError>
) => {
    return (options.client ?? client).get<HentTotrinnsvurderingerResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/behandling/{behandlingId}/totrinn/v1',
        ...options,
    });
};

/**
 * Hent journalpost informasjon
 */
export const hentJournalposter = <ThrowOnError extends boolean = false>(
    options: Options<HentJournalposterData, ThrowOnError>
) => {
    return (options.client ?? client).get<HentJournalposterResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/behandling/{behandlingId}/journalposter',
        ...options,
    });
};

/**
 * Hent dokument fra journalføring
 */
export const hentDokument = <ThrowOnError extends boolean = false>(
    options: Options<HentDokumentData, ThrowOnError>
) => {
    return (options.client ?? client).get<HentDokumentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/behandling/{behandlingId}/journalpost/{journalpostId}/dokument/{dokumentInfoId}',
        ...options,
    });
};

/**
 * Hent foreldelsesinformasjon
 */
export const hentVurdertForeldelse = <ThrowOnError extends boolean = false>(
    options: Options<HentVurdertForeldelseData, ThrowOnError>
) => {
    return (options.client ?? client).get<HentVurdertForeldelseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/behandling/{behandlingId}/foreldelse/v1',
        ...options,
    });
};

/**
 * Hent fakta om feilutbetaling
 */
export const hentFaktaomfeilutbetaling = <ThrowOnError extends boolean = false>(
    options: Options<HentFaktaomfeilutbetalingData, ThrowOnError>
) => {
    return (options.client ?? client).get<
        HentFaktaomfeilutbetalingResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/behandling/{behandlingId}/fakta/v1',
        ...options,
    });
};

/**
 * Hent inaktive fakta om feilutbetalinger
 */
export const hentInaktivFaktaomfeilutbetaling = <ThrowOnError extends boolean = false>(
    options: Options<HentInaktivFaktaomfeilutbetalingData, ThrowOnError>
) => {
    return (options.client ?? client).get<
        HentInaktivFaktaomfeilutbetalingResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/behandling/{behandlingId}/fakta/inaktiv',
        ...options,
    });
};

/**
 * Hent beregningsresultat
 */
export const hentBeregningsresultat = <ThrowOnError extends boolean = false>(
    options: Options<HentBeregningsresultatData, ThrowOnError>
) => {
    return (options.client ?? client).get<HentBeregningsresultatResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/behandling/{behandlingId}/beregn/resultat/v1',
        ...options,
    });
};

/**
 * Hent behandling
 */
export const hentBehandling = <ThrowOnError extends boolean = false>(
    options: Options<HentBehandlingData, ThrowOnError>
) => {
    return (options.client ?? client).get<HentBehandlingResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/api/behandling/v1/{behandlingId}',
        ...options,
    });
};
