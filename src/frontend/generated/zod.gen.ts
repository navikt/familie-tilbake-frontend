// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zVergeDto = z.object({
    ident: z.optional(z.string()),
    orgNr: z.optional(z.string()),
    type: z.enum([
        'VERGE_FOR_BARN',
        'VERGE_FOR_FORELDRELØST_BARN',
        'VERGE_FOR_VOKSEN',
        'ADVOKAT',
        'ANNEN_FULLMEKTIG',
        'UDEFINERT',
    ]),
    navn: z.string(),
    begrunnelse: z.optional(z.string().min(0).max(4000)),
});

export const zRessursVergeDto = z.object({
    data: z.optional(zVergeDto),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zBehandlingsstegsinfoDto = z.object({
    behandlingssteg: z.enum([
        'VARSEL',
        'GRUNNLAG',
        'BREVMOTTAKER',
        'VERGE',
        'FAKTA',
        'FORELDELSE',
        'VILKÅRSVURDERING',
        'FORESLÅ_VEDTAK',
        'FATTE_VEDTAK',
        'IVERKSETT_VEDTAK',
        'AVSLUTTET',
    ]),
    behandlingsstegstatus: z.enum([
        'VENTER',
        'KLAR',
        'UTFØRT',
        'AUTOUTFØRT',
        'TILBAKEFØRT',
        'AVBRUTT',
    ]),
    venteårsak: z.optional(
        z.enum([
            'VENT_PÅ_BRUKERTILBAKEMELDING',
            'VENT_PÅ_TILBAKEKREVINGSGRUNNLAG',
            'AVVENTER_DOKUMENTASJON',
            'UTVIDET_TILSVAR_FRIST',
            'ENDRE_TILKJENT_YTELSE',
            'VENT_PÅ_MULIG_MOTREGNING',
            'MANGLER_STØTTE',
        ])
    ),
    tidsfrist: z.optional(z.iso.date()),
});

export const zManuellAdresseInfo = z.object({
    adresselinje1: z.string().regex(/^(.{1,80})$/),
    adresselinje2: z.optional(z.string().regex(/^(.{0,80})$/)),
    postnummer: z.string().regex(/^(.{0,10})$/),
    poststed: z.string().regex(/^(.{0,50})$/),
    landkode: z.string().regex(/^[a-zA-Z]{2}$/),
});

export const zBrevmottaker = z.object({
    type: z.enum(['BRUKER_MED_UTENLANDSK_ADRESSE', 'FULLMEKTIG', 'VERGE', 'DØDSBO']),
    vergetype: z.optional(
        z.enum([
            'VERGE_FOR_BARN',
            'VERGE_FOR_FORELDRELØST_BARN',
            'VERGE_FOR_VOKSEN',
            'ADVOKAT',
            'ANNEN_FULLMEKTIG',
            'UDEFINERT',
        ])
    ),
    navn: z.string().regex(/^(.{1,80})$/),
    organisasjonsnummer: z.optional(z.string().regex(/(^$|.{9})/)),
    personIdent: z.optional(z.string().regex(/(^$|.{11})/)),
    manuellAdresseInfo: z.optional(zManuellAdresseInfo),
});

export const zManuellBrevmottakerResponsDto = z.object({
    id: z.uuid(),
    brevmottaker: zBrevmottaker,
});

export const zBehandlingDto = z.object({
    eksternBrukId: z.uuid(),
    behandlingId: z.uuid(),
    erBehandlingHenlagt: z.boolean(),
    type: z.enum(['TILBAKEKREVING', 'REVURDERING_TILBAKEKREVING']),
    status: z.enum(['AVSLUTTET', 'FATTER_VEDTAK', 'IVERKSETTER_VEDTAK', 'OPPRETTET', 'UTREDES']),
    opprettetDato: z.iso.date(),
    avsluttetDato: z.optional(z.iso.date()),
    endretTidspunkt: z.iso.datetime(),
    vedtaksdato: z.optional(z.iso.date()),
    enhetskode: z.string(),
    enhetsnavn: z.string(),
    resultatstype: z.optional(
        z.enum([
            'IKKE_FASTSATT',
            'HENLAGT_FEILOPPRETTET',
            'HENLAGT_FEILOPPRETTET_MED_BREV',
            'HENLAGT_FEILOPPRETTET_UTEN_BREV',
            'HENLAGT_KRAVGRUNNLAG_NULLSTILT',
            'HENLAGT_TEKNISK_VEDLIKEHOLD',
            'HENLAGT_MANGLENDE_KRAVGRUNNLAG',
            'HENLAGT',
            'INGEN_TILBAKEBETALING',
            'DELVIS_TILBAKEBETALING',
            'FULL_TILBAKEBETALING',
        ])
    ),
    ansvarligSaksbehandler: z.string(),
    ansvarligBeslutter: z.optional(z.string()),
    erBehandlingPåVent: z.boolean(),
    kanHenleggeBehandling: z.boolean(),
    kanRevurderingOpprettes: z.boolean(),
    harVerge: z.boolean(),
    kanEndres: z.boolean(),
    kanSetteTilbakeTilFakta: z.boolean(),
    varselSendt: z.boolean(),
    behandlingsstegsinfo: z.array(zBehandlingsstegsinfoDto),
    fagsystemsbehandlingId: z.string(),
    eksternFagsakId: z.string(),
    behandlingsårsakstype: z.optional(
        z.enum([
            'REVURDERING_KLAGE_NFP',
            'REVURDERING_KLAGE_KA',
            'REVURDERING_OPPLYSNINGER_OM_VILKÅR',
            'REVURDERING_OPPLYSNINGER_OM_FORELDELSE',
            'REVURDERING_FEILUTBETALT_BELØP_HELT_ELLER_DELVIS_BORTFALT',
        ])
    ),
    støtterManuelleBrevmottakere: z.boolean(),
    harManuelleBrevmottakere: z.boolean(),
    manuelleBrevmottakere: z.array(zManuellBrevmottakerResponsDto),
    begrunnelseForTilbakekreving: z.optional(z.string()),
    saksbehandlingstype: z.enum([
        'ORDINÆR',
        'AUTOMATISK_IKKE_INNKREVING_LAVT_BELØP',
        'AUTOMATISK_IKKE_INNKREVING_UNDER_4X_RETTSGEBYR',
    ]),
    erNyModell: z.boolean(),
});

export const zRessursBehandlingDto = z.object({
    data: z.optional(zBehandlingDto),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zVurdering = z.object({
    navn: z.string(),
});

export const zDatoperiode = z.object({
    fom: z.iso.date(),
    tom: z.iso.date(),
    fomMåned: z.string(),
    tomMåned: z.string(),
});

export const zBeregningsresultatsperiodeDto = z.object({
    periode: zDatoperiode,
    vurdering: z.optional(zVurdering),
    feilutbetaltBeløp: z.number(),
    andelAvBeløp: z.optional(z.number()),
    renteprosent: z.optional(z.number()),
    tilbakekrevingsbeløp: z.optional(z.number()),
    tilbakekrevesBeløpEtterSkatt: z.optional(z.number()),
});

export const zVurderingAvBrukersUttalelseDto = z.object({
    harBrukerUttaltSeg: z.enum(['JA', 'NEI', 'IKKE_AKTUELT', 'IKKE_VURDERT']),
    beskrivelse: z.optional(z.string()),
});

export const zBeregningsresultatDto = z.object({
    beregningsresultatsperioder: z.array(zBeregningsresultatsperiodeDto),
    vedtaksresultat: z.enum([
        'FULL_TILBAKEBETALING',
        'DELVIS_TILBAKEBETALING',
        'INGEN_TILBAKEBETALING',
    ]),
    vurderingAvBrukersUttalelse: zVurderingAvBrukersUttalelseDto,
});

export const zRessursBeregningsresultatDto = z.object({
    data: z.optional(zBeregningsresultatDto),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zFeilutbetalingsperiodeDto = z.object({
    periode: zDatoperiode,
    feilutbetaltBeløp: z.number(),
    hendelsestype: z.optional(
        z.enum([
            'ANNET',
            'BOR_MED_SØKER',
            'BOSATT_I_RIKET',
            'LOVLIG_OPPHOLD',
            'DØDSFALL',
            'DELT_BOSTED',
            'BARNS_ALDER',
            'MEDLEMSKAP',
            'OPPHOLD_I_NORGE',
            'ENSLIG_FORSØRGER',
            'OVERGANGSSTØNAD',
            'YRKESRETTET_AKTIVITET',
            'STØNADSPERIODE',
            'INNTEKT',
            'PENSJONSYTELSER',
            'STØNAD_TIL_BARNETILSYN',
            'SKOLEPENGER',
            'SATSER',
            'SMÅBARNSTILLEGG',
            'MEDLEMSKAP_BA',
            'UTVIDET',
            'VILKÅR_BARN',
            'VILKÅR_SØKER',
            'BARN_I_FOSTERHJEM_ELLER_INSTITUSJON',
            'KONTANTSTØTTENS_STØRRELSE',
            'STØTTEPERIODE',
            'UTBETALING',
            'KONTANTSTØTTE_FOR_ADOPTERTE_BARN',
            'ANNET_KS',
        ])
    ),
    hendelsesundertype: z.optional(
        z.enum([
            'ANNET_FRITEKST',
            'BOR_IKKE_MED_BARN',
            'BARN_FLYTTET_FRA_NORGE',
            'BRUKER_FLYTTET_FRA_NORGE',
            'BARN_BOR_IKKE_I_NORGE',
            'BRUKER_BOR_IKKE_I_NORGE',
            'UTEN_OPPHOLDSTILLATELSE',
            'BARN_DØD',
            'BRUKER_DØD',
            'ENIGHET_OM_OPPHØR_DELT_BOSTED',
            'UENIGHET_OM_OPPHØR_DELT_BOSTED',
            'BARN_OVER_18_ÅR',
            'BARN_OVER_6_ÅR',
            'MEDLEM_SISTE_5_ÅR',
            'LOVLIG_OPPHOLD',
            'BRUKER_IKKE_OPPHOLD_I_NORGE',
            'BARN_IKKE_OPPHOLD_I_NORGE',
            'OPPHOLD_UTLAND_6_UKER_ELLER_MER',
            'UGIFT',
            'SEPARERT_SKILT',
            'SAMBOER',
            'NYTT_BARN_SAMME_PARTNER',
            'ENDRET_SAMVÆRSORDNING',
            'BARN_FLYTTET',
            'NÆRE_BOFORHOLD',
            'FORELDRE_LEVER_SAMMEN',
            'BARN_8_ÅR',
            'BARN_FYLT_1_ÅR',
            'UTDANNING',
            'ETABLERER_EGEN_VIRKSOMHET',
            'HOVEDPERIODE_3_ÅR',
            'UTVIDELSE_UTDANNING',
            'UTVIDELSE_SÆRLIG_TILSYNSKREVENDE_BARN',
            'UTVIDELSE_FORBIGÅENDE_SYKDOM',
            'PÅVENTE_AV_SKOLESTART_STARTET_IKKE',
            'PÅVENTE_SKOLESTART_STARTET_TIDLIGERE',
            'PÅVENTE_ARBEIDSTILBUD_STARTET_IKKE',
            'PÅVENTE_ARBEIDSTILBUD_STARTET_TIDLIGERE',
            'PÅVENTE_BARNETILSYN_IKKE_HA_TILSYN',
            'PÅVENTE_BARNETILSYN_STARTET_TIDLIGERE',
            'ARBEIDSSØKER',
            'REELL_ARBEIDSSØKER',
            'ARBEIDSINNTEKT_FÅTT_INNTEKT',
            'ARBEIDSINNTEKT_ENDRET_INNTEKT',
            'ANDRE_FOLKETRYGDYTELSER',
            'SELVSTENDIG_NÆRINGSDRIVENDE_FÅTT_INNTEKT',
            'SELVSTENDIG_NÆRINGSDRIVENDE_ENDRET_INNTEKT',
            'UFØRETRYGD',
            'GJENLEVENDE_EKTEFELLE',
            'ARBEID',
            'EGEN_VIRKSOMHET',
            'TILSYNSUTGIFTER_OPPHØRT',
            'TILSYNSUTGIFTER_ENDRET',
            'FORBIGÅENDE_SYKDOM',
            'ETTER_4_SKOLEÅR_UTGIFTENE_OPPHØRT',
            'ETTER_4_SKOLEÅR_ENDRET_ARBEIDSTID',
            'INNTEKT_OVER_6G',
            'KONTANTSTØTTE',
            'ØKT_KONTANTSTØTTE',
            'IKKE_RETT_TIL_OVERGANGSSTØNAD',
            'SLUTTET_I_UTDANNING',
            'IKKE_ARBEID',
            'SMÅBARNSTILLEGG_OVERGANGSSTØNAD',
            'SATSENDRING',
            'SMÅBARNSTILLEGG_3_ÅR',
            'BRUKER_OG_BARN_FLYTTET_FRA_NORGE',
            'BRUKER_OG_BARN_BOR_IKKE_I_NORGE',
            'FLYTTET_SAMMEN',
            'UTENLANDS_IKKE_MEDLEM',
            'MEDLEMSKAP_OPPHØRT',
            'ANNEN_FORELDER_IKKE_MEDLEM',
            'ANNEN_FORELDER_OPPHØRT_MEDLEMSKAP',
            'FLERE_UTENLANDSOPPHOLD',
            'BOSATT_IKKE_MEDLEM',
            'GIFT',
            'NYTT_BARN',
            'SAMBOER_12_MÅNEDER',
            'FLYTTET_SAMMEN_ANNEN_FORELDER',
            'FLYTTET_SAMMEN_EKTEFELLE',
            'FLYTTET_SAMMEN_SAMBOER',
            'GIFT_IKKE_EGEN_HUSHOLDNING',
            'SAMBOER_IKKE_EGEN_HUSHOLDNING',
            'EKTEFELLE_AVSLUTTET_SONING',
            'SAMBOER_AVSLUTTET_SONING',
            'EKTEFELLE_INSTITUSJON',
            'SAMBOER_INSTITUSJON',
            'BARN_IKKE_BOSATT',
            'BARN_IKKE_OPPHOLDSTILLATELSE',
            'BARN_OVER_2_ÅR',
            'DEN_ANDRE_FORELDEREN_IKKE_MEDLEM_FOLKETRYGDEN',
            'DEN_ANDRE_FORELDEREN_IKKE_MEDLEM_FOLKETRYGDEN_ELLER_EØS',
            'SØKER_IKKE_MEDLEM_FOLKETRYGDEN',
            'SØKER_IKKE_MEDLEM_FOLKETRYGDEN_ELLER_EØS',
            'BEGGE_FORELDRENE_IKKE_MEDLEM_FOLKETRYGDEN',
            'BEGGE_FORELDRENE_IKKE_MEDLEM_FOLKETRYGDEN_ELLER_EØS',
            'BARN_BOR_IKKE_HOS_SØKER',
            'UTENLANDSOPPHOLD_OVER_3_MÅNEDER',
            'SØKER_FLYTTET_FRA_NORGE',
            'SØKER_IKKE_BOSATT',
            'SØKER_IKKE_OPPHOLDSTILLATELSE',
            'SØKER_IKKE_OPPHOLDSTILLATELSE_I_MER_ENN_12_MÅNEDER',
            'BARN_I_FOSTERHJEM',
            'BARN_I_INSTITUSJON',
            'FULLTIDSPLASS_BARNEHAGE',
            'DELTIDSPLASS_BARNEHAGEPLASS',
            'ØKT_TIMEANTALL_I_BARNEHAGE',
            'BARN_2_ÅR',
            'DELT_BOSTED_AVTALE_OPPHØRT',
            'DOBBELUTBETALING',
            'MER_ENN_11_MÅNEDER',
            'BARN_STARTET_PÅ_SKOLEN',
        ])
    ),
});

export const zFaktainfo = z.object({
    revurderingsårsak: z.string(),
    revurderingsresultat: z.string(),
    tilbakekrevingsvalg: z.optional(
        z.enum([
            'OPPRETT_TILBAKEKREVING_MED_VARSEL',
            'OPPRETT_TILBAKEKREVING_UTEN_VARSEL',
            'OPPRETT_TILBAKEKREVING_AUTOMATISK',
            'IGNORER_TILBAKEKREVING',
        ])
    ),
    konsekvensForYtelser: z.array(z.string()),
});

export const zFaktaFeilutbetalingDto = z.object({
    varsletBeløp: z.optional(z.coerce.bigint()),
    totalFeilutbetaltPeriode: zDatoperiode,
    feilutbetaltePerioder: z.array(zFeilutbetalingsperiodeDto),
    totaltFeilutbetaltBeløp: z.number(),
    revurderingsvedtaksdato: z.iso.date(),
    begrunnelse: z.string(),
    faktainfo: zFaktainfo,
    kravgrunnlagReferanse: z.string(),
    vurderingAvBrukersUttalelse: zVurderingAvBrukersUttalelseDto,
    opprettetTid: z.optional(z.iso.datetime()),
    gjelderDødsfall: z.boolean(),
});

export const zRessursListFaktaFeilutbetalingDto = z.object({
    data: z.optional(z.array(zFaktaFeilutbetalingDto)),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zRessursFaktaFeilutbetalingDto = z.object({
    data: z.optional(zFaktaFeilutbetalingDto),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zVurdertForeldelsesperiodeDto = z.object({
    periode: zDatoperiode,
    feilutbetaltBeløp: z.number(),
    begrunnelse: z.optional(z.string()),
    foreldelsesvurderingstype: z.optional(
        z.enum(['IKKE_VURDERT', 'FORELDET', 'IKKE_FORELDET', 'TILLEGGSFRIST'])
    ),
    foreldelsesfrist: z.optional(z.iso.date()),
    oppdagelsesdato: z.optional(z.iso.date()),
});

export const zVurdertForeldelseDto = z.object({
    foreldetPerioder: z.array(zVurdertForeldelsesperiodeDto),
});

export const zRessursVurdertForeldelseDto = z.object({
    data: z.optional(zVurdertForeldelseDto),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zSak = z.object({
    arkivsaksnummer: z.optional(z.string()),
    arkivsaksystem: z.optional(z.string()),
    fagsakId: z.optional(z.string()),
    sakstype: z.optional(z.string()),
    fagsaksystem: z.optional(z.string()),
});

export const zLogiskVedlegg = z.object({
    logiskVedleggId: z.string(),
    tittel: z.string(),
});

export const zDokumentInfo = z.object({
    dokumentInfoId: z.string(),
    tittel: z.optional(z.string()),
    brevkode: z.optional(z.string()),
    logiskeVedlegg: z.optional(z.array(zLogiskVedlegg)),
});

export const zRelevantDato = z.object({
    dato: z.iso.datetime(),
    datotype: z.string(),
});

export const zJournalpost = z.object({
    journalpostId: z.string(),
    journalposttype: z.enum(['I', 'U', 'N']),
    journalstatus: z.enum([
        'MOTTATT',
        'JOURNALFOERT',
        'FERDIGSTILT',
        'EKSPEDERT',
        'UNDER_ARBEID',
        'FEILREGISTRERT',
        'UTGAAR',
        'AVBRUTT',
        'UKJENT_BRUKER',
        'RESERVERT',
        'OPPLASTING_DOKUMENT',
        'UKJENT',
    ]),
    tema: z.optional(z.string()),
    tittel: z.optional(z.string()),
    sak: z.optional(zSak),
    dokumenter: z.optional(z.array(zDokumentInfo)),
    relevanteDatoer: z.optional(z.array(zRelevantDato)),
    eksternReferanseId: z.optional(z.string()),
});

export const zRessursListJournalpost = z.object({
    data: z.optional(z.array(zJournalpost)),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zTotrinnsstegsinfo = z.object({
    behandlingssteg: z.enum([
        'VARSEL',
        'GRUNNLAG',
        'BREVMOTTAKER',
        'VERGE',
        'FAKTA',
        'FORELDELSE',
        'VILKÅRSVURDERING',
        'FORESLÅ_VEDTAK',
        'FATTE_VEDTAK',
        'IVERKSETT_VEDTAK',
        'AVSLUTTET',
    ]),
    godkjent: z.optional(z.boolean()),
    begrunnelse: z.optional(z.string()),
});

export const zTotrinnsvurderingDto = z.object({
    totrinnsstegsinfo: z.array(zTotrinnsstegsinfo),
});

export const zRessursTotrinnsvurderingDto = z.object({
    data: z.optional(zTotrinnsvurderingDto),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zHistorikkinnslagDto = z.object({
    behandlingId: z.string(),
    type: z.enum(['HENDELSE', 'SKJERMLENKE', 'BREV']),
    aktør: z.enum(['SAKSBEHANDLER', 'BESLUTTER', 'VEDTAKSLØSNING']),
    aktørIdent: z.string(),
    tittel: z.string(),
    tekst: z.optional(z.string()),
    steg: z.optional(z.string()),
    journalpostId: z.optional(z.string()),
    dokumentId: z.optional(z.string()),
    opprettetTid: z.iso.datetime(),
});

export const zRessursListHistorikkinnslagDto = z.object({
    data: z.optional(z.array(zHistorikkinnslagDto)),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zRessursListManuellBrevmottakerResponsDto = z.object({
    data: z.optional(z.array(zManuellBrevmottakerResponsDto)),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zBrukerlenkeDto = z.object({
    url: z.string(),
});

export const zRessursBrukerlenkeDto = z.object({
    data: z.optional(zBrukerlenkeDto),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zPersonIdent = z.object({
    ident: z.string().regex(/(^$|.{11})/),
});

export const zUnderavsnitt = z.object({
    overskrift: z.optional(z.string()),
    brødtekst: z.optional(z.string()),
    fritekst: z.optional(z.string()),
    fritekstTillatt: z.boolean(),
    fritekstPåkrevet: z.boolean(),
    underavsnittstype: z.optional(
        z.enum(['FAKTA', 'FORELDELSE', 'VILKÅR', 'SÆRLIGEGRUNNER', 'SÆRLIGEGRUNNER_ANNET'])
    ),
});

export const zAvsnitt = z.object({
    overskrift: z.optional(z.string()),
    underavsnittsliste: z.array(zUnderavsnitt),
    avsnittstype: z.optional(
        z.enum(['OPPSUMMERING', 'PERIODE', 'SAMMENSLÅTT_PERIODE', 'TILLEGGSINFORMASJON'])
    ),
    fom: z.optional(z.iso.date()),
    tom: z.optional(z.iso.date()),
});

export const zRessursListAvsnitt = z.object({
    data: z.optional(z.array(zAvsnitt)),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zBehandling = z.object({
    behandlingId: z.uuid(),
    opprettetTidspunkt: z.iso.datetime(),
    aktiv: z.boolean(),
    getårsak: z.optional(
        z.enum([
            'REVURDERING_KLAGE_NFP',
            'REVURDERING_KLAGE_KA',
            'REVURDERING_OPPLYSNINGER_OM_VILKÅR',
            'REVURDERING_OPPLYSNINGER_OM_FORELDELSE',
            'REVURDERING_FEILUTBETALT_BELØP_HELT_ELLER_DELVIS_BORTFALT',
        ])
    ),
    type: z.enum(['TILBAKEKREVING', 'REVURDERING_TILBAKEKREVING']),
    status: z.enum(['AVSLUTTET', 'FATTER_VEDTAK', 'IVERKSETTER_VEDTAK', 'OPPRETTET', 'UTREDES']),
    vedtaksdato: z.optional(z.iso.datetime()),
    resultat: z.optional(
        z.enum([
            'INGEN_TILBAKEBETALING',
            'DELVIS_TILBAKEBETALING',
            'FULL_TILBAKEBETALING',
            'HENLAGT',
        ])
    ),
});

export const zRessursListBehandling = z.object({
    data: z.optional(z.array(zBehandling)),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zFinnesBehandlingResponse = z.object({
    finnesÅpenBehandling: z.boolean(),
});

export const zRessursFinnesBehandlingResponse = z.object({
    data: z.optional(zFinnesBehandlingResponse),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zFrontendBrukerDto = z.object({
    personIdent: z.string(),
    navn: z.string(),
    fødselsdato: z.optional(z.iso.date()),
    kjønn: z.enum(['MANN', 'KVINNE', 'UKJENT']),
    dødsdato: z.optional(z.iso.date()),
});

export const zBehandlingsoppsummeringDto = z.object({
    behandlingId: z.uuid(),
    eksternBrukId: z.uuid(),
    type: z.enum(['TILBAKEKREVING', 'REVURDERING_TILBAKEKREVING']),
    status: z.enum(['AVSLUTTET', 'FATTER_VEDTAK', 'IVERKSETTER_VEDTAK', 'OPPRETTET', 'UTREDES']),
});

export const zInstitusjonDto = z.object({
    organisasjonsnummer: z.string(),
    navn: z.string(),
});

export const zFagsakDto = z.object({
    eksternFagsakId: z.string(),
    ytelsestype: z.enum([
        'BARNETRYGD',
        'OVERGANGSSTØNAD',
        'BARNETILSYN',
        'SKOLEPENGER',
        'KONTANTSTØTTE',
        'TILLEGGSSTØNAD',
    ]),
    fagsystem: z.enum(['BA', 'EF', 'KONT', 'IT01', 'TS']),
    språkkode: z.enum(['NB', 'NN']),
    bruker: zFrontendBrukerDto,
    behandlinger: z.array(zBehandlingsoppsummeringDto),
    institusjon: z.optional(zInstitusjonDto),
});

export const zRessursFagsakDto = z.object({
    data: z.optional(zFagsakDto),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zFagsystemVedtak = z.object({
    eksternBehandlingId: z.string(),
    behandlingstype: z.string(),
    resultat: z.string(),
    vedtakstidspunkt: z.iso.datetime(),
    fagsystemType: z.enum(['TILBAKEKREVING']),
    regelverk: z.optional(z.enum(['NASJONAL', 'EØS'])),
});

export const zRessursListFagsystemVedtak = z.object({
    data: z.optional(z.array(zFagsystemVedtak)),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zRessursMapStringBoolean = z.object({
    data: z.optional(z.record(z.string(), z.boolean())),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zKravgrunnlagsinfo = z.object({
    eksternKravgrunnlagId: z.int(),
    kravgrunnlagKravstatuskode: z.string(),
    mottattXmlId: z.optional(z.uuid()),
    eksternId: z.string(),
    opprettetTid: z.iso.datetime(),
});

export const zRessursListKravgrunnlagsinfo = z.object({
    data: z.optional(z.array(zKravgrunnlagsinfo)),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zBehandlingsinfo = z.object({
    eksternKravgrunnlagId: z.optional(z.int()),
    kravgrunnlagId: z.optional(z.uuid()),
    kravgrunnlagKravstatuskode: z.optional(z.string()),
    eksternId: z.string(),
    opprettetTid: z.iso.datetime(),
    behandlingId: z.optional(z.uuid()),
    behandlingstatus: z.optional(
        z.enum(['AVSLUTTET', 'FATTER_VEDTAK', 'IVERKSETTER_VEDTAK', 'OPPRETTET', 'UTREDES'])
    ),
});

export const zRessursListBehandlingsinfo = z.object({
    data: z.optional(z.array(zBehandlingsinfo)),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zInfo = z.object({
    appImage: z.string(),
    appName: z.string(),
    namespace: z.string(),
    clusterName: z.string(),
});

export const zRessursInfo = z.object({
    data: z.optional(zInfo),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zRessursBoolean = z.object({
    data: z.optional(z.boolean()),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zKanBehandlingOpprettesManueltRespons = z.object({
    kanBehandlingOpprettes: z.boolean(),
    melding: z.string(),
    kravgrunnlagsreferanse: z.optional(z.string()),
});

export const zRessursKanBehandlingOpprettesManueltRespons = z.object({
    data: z.optional(zKanBehandlingOpprettesManueltRespons),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zOpprettManueltTilbakekrevingRequest = z.object({
    eksternFagsakId: z.string(),
    ytelsestype: z.enum([
        'BARNETRYGD',
        'OVERGANGSSTØNAD',
        'BARNETILSYN',
        'SKOLEPENGER',
        'KONTANTSTØTTE',
        'TILLEGGSSTØNAD',
    ]),
    eksternId: z.string(),
});

export const zOpprettRevurderingDto = z.object({
    ytelsestype: z.enum([
        'BARNETRYGD',
        'OVERGANGSSTØNAD',
        'BARNETILSYN',
        'SKOLEPENGER',
        'KONTANTSTØTTE',
        'TILLEGGSSTØNAD',
    ]),
    originalBehandlingId: z.uuid(),
    getårsakstype: z.enum([
        'REVURDERING_KLAGE_NFP',
        'REVURDERING_KLAGE_KA',
        'REVURDERING_OPPLYSNINGER_OM_VILKÅR',
        'REVURDERING_OPPLYSNINGER_OM_FORELDELSE',
        'REVURDERING_FEILUTBETALT_BELØP_HELT_ELLER_DELVIS_BORTFALT',
    ]),
});

export const zPeriode = z.object({
    fom: z.iso.date(),
    tom: z.iso.date(),
});

export const zVarsel = z.object({
    varseltekst: z.string().min(1),
    sumFeilutbetaling: z.number().gte(1),
    perioder: z.array(zPeriode).min(1).max(2147483647),
});

export const zVerge = z.object({
    vergetype: z.enum([
        'VERGE_FOR_BARN',
        'VERGE_FOR_FORELDRELØST_BARN',
        'VERGE_FOR_VOKSEN',
        'ADVOKAT',
        'ANNEN_FULLMEKTIG',
        'UDEFINERT',
    ]),
    navn: z.string(),
    organisasjonsnummer: z.optional(z.string().regex(/(^$|.{9})/)),
    personIdent: z.optional(z.string().regex(/(^$|.{11})/)),
});

export const zInstitusjon = z.object({
    organisasjonsnummer: z.string().regex(/(^$|.{9})/),
});

export const zOpprettTilbakekrevingRequest = z.object({
    fagsystem: z.enum(['BA', 'EF', 'KONT', 'IT01', 'TS']),
    regelverk: z.optional(z.enum(['NASJONAL', 'EØS'])),
    ytelsestype: z.enum([
        'BARNETRYGD',
        'OVERGANGSSTØNAD',
        'BARNETILSYN',
        'SKOLEPENGER',
        'KONTANTSTØTTE',
        'TILLEGGSSTØNAD',
    ]),
    eksternFagsakId: z.string(),
    personIdent: z.string().regex(/(^$|.{11})/),
    eksternId: z.string(),
    behandlingstype: z.optional(z.enum(['TILBAKEKREVING', 'REVURDERING_TILBAKEKREVING'])),
    manueltOpprettet: z.boolean(),
    språkkode: z.enum(['NB', 'NN']),
    enhetId: z.string(),
    enhetsnavn: z.string(),
    saksbehandlerIdent: z.string(),
    varsel: z.optional(zVarsel),
    revurderingsvedtaksdato: z.iso.date(),
    verge: z.optional(zVerge),
    faktainfo: zFaktainfo,
    institusjon: z.optional(zInstitusjon),
    manuelleBrevmottakere: z.array(zBrevmottaker),
    begrunnelseForTilbakekreving: z.optional(z.string()),
});

export const zBeregnetPeriodeDto = z.object({
    periode: zDatoperiode,
    feilutbetaltBeløp: z.number(),
});

export const zBeregnetPerioderDto = z.object({
    beregnetPerioder: z.array(zBeregnetPeriodeDto),
});

export const zRessursBeregnetPerioderDto = z.object({
    data: z.optional(zBeregnetPerioderDto),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zPeriodeMedTekstDto = z.object({
    periode: zDatoperiode,
    faktaAvsnitt: z.optional(z.string().min(0).max(4000)),
    foreldelseAvsnitt: z.optional(z.string().min(0).max(4000)),
    vilkårAvsnitt: z.optional(z.string().min(0).max(4000)),
    særligeGrunnerAvsnitt: z.optional(z.string().min(0).max(4000)),
    særligeGrunnerAnnetAvsnitt: z.optional(z.string().min(0).max(4000)),
});

export const zFritekstavsnittDto = z.object({
    oppsummeringstekst: z.optional(z.string().min(0).max(10000)),
    perioderMedTekst: z.array(zPeriodeMedTekstDto).min(0).max(100),
});

export const zRessursUuid = z.object({
    data: z.optional(z.uuid()),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zRessurs = z.object({
    data: z.optional(z.unknown()),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zRessursByte = z.object({
    data: z.optional(z.string()),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zBestillBrevDto = z.object({
    behandlingId: z.uuid(),
    brevmalkode: z.enum(['INNHENT_DOKUMENTASJON', 'FRITEKSTBREV', 'VARSEL', 'KORRIGERT_VARSEL']),
    fritekst: z.string().min(1).max(3000),
});

export const zByttEnhetDto = z.object({
    enhet: z.string(),
    begrunnelse: z.string().min(0).max(400),
});

export const zHenleggelsesbrevFritekstDto = z.object({
    behandlingsresultatstype: z.enum([
        'IKKE_FASTSATT',
        'HENLAGT_FEILOPPRETTET',
        'HENLAGT_FEILOPPRETTET_MED_BREV',
        'HENLAGT_FEILOPPRETTET_UTEN_BREV',
        'HENLAGT_KRAVGRUNNLAG_NULLSTILT',
        'HENLAGT_TEKNISK_VEDLIKEHOLD',
        'HENLAGT_MANGLENDE_KRAVGRUNNLAG',
        'HENLAGT',
        'INGEN_TILBAKEBETALING',
        'DELVIS_TILBAKEBETALING',
        'FULL_TILBAKEBETALING',
    ]),
    begrunnelse: z.string(),
    fritekst: z.optional(z.string().min(0).max(1500)),
});

export const zRessursString = z.object({
    data: z.optional(z.string()),
    status: z.enum(['SUKSESS', 'FEILET', 'IKKE_HENTET', 'IKKE_TILGANG', 'FUNKSJONELL_FEIL']),
    melding: z.string(),
    frontendFeilmelding: z.optional(z.string()),
    stacktrace: z.optional(z.string()),
});

export const zTvingHenleggBehandlingData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zTvingHenleggBehandlingResponse = zRessursString;

export const zKorrigerKravgrunnlagData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
        eksternKravgrunnlagId: z.int(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zKorrigerKravgrunnlagResponse = zRessursString;

export const zKorrigerKravgrunnlag1Data = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zKorrigerKravgrunnlag1Response = zRessursString;

export const zFlyttBehandlingTilFaktaData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFlyttBehandlingTilFaktaResponse = zRessursString;

export const zArkiverMottattKravgrunnlagData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        mottattXmlId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zArkiverMottattKravgrunnlagResponse = zRessursString;

export const zAnnulerKravgrunnlagData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        eksternKravgrunnlagId: z.int(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zAnnulerKravgrunnlagResponse = zRessursString;

export const zFjernManuellBrevmottakerData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
        manuellBrevmottakerId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFjernManuellBrevmottakerResponse = zRessursString;

export const zOppdaterManuellBrevmottakerData = z.object({
    body: zBrevmottaker,
    path: z.object({
        behandlingId: z.uuid(),
        manuellBrevmottakerId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zOppdaterManuellBrevmottakerResponse = zRessursString;

export const zFjernBrevmottakerStegData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFjernBrevmottakerStegResponse = zRessursString;

export const zHenleggBehandlingData = z.object({
    body: zHenleggelsesbrevFritekstDto,
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zHenleggBehandlingResponse = zRessursString;

export const zTaBehandlingAvVentData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zTaBehandlingAvVentResponse = zRessursString;

export const zFlyttBehandlingTilFakta1Data = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFlyttBehandlingTilFakta1Response = zRessursString;

export const zByttEnhetData = z.object({
    body: zByttEnhetDto,
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zByttEnhetResponse = zRessursString;

export const zAngreSendTilBeslutterData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zAngreSendTilBeslutterResponse = zRessursString;

export const zHentVergeData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zHentVergeResponse = zRessursVergeDto;

export const zOpprettVergeStegData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zOpprettVergeStegResponse = zRessursString;

export const zFjernVergeData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFjernVergeResponse = zRessursString;

export const zSammenslåData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zSammenslåResponse = zRessursString;

export const zAngreSammenslåingData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zAngreSammenslåingResponse = zRessursString;

export const zSettIverksettStegTilUtførtOgFortsettData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        taskId: z.coerce.bigint(),
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

export const zSendSisteTilstandForBehandlingerTilDvhData = z.object({
    body: z.array(z.uuid()),
    path: z.optional(z.never()),
    query: z.optional(z.never()),
});

export const zLagOppdaterOppgaveTaskForBehandlingData = z.object({
    body: z.array(z.uuid()),
    path: z.optional(z.never()),
    query: z.optional(z.never()),
});

export const zFinnGamleÅpneBehandlingerUtenOppgaveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        fagsystem: z.enum(['BA', 'EF', 'KONT', 'IT01', 'TS']),
    }),
    query: z.optional(z.never()),
});

export const zFerdigstillOppgaverForBehandlingData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
        oppgaveType: z.string(),
    }),
    query: z.optional(z.never()),
});

export const zFerdigstillGodkjenneVedtakOppgaveOgOpprettBehandleSakOppgaveData = z.object({
    body: z.array(z.uuid()),
    path: z.optional(z.never()),
    query: z.optional(z.never()),
});

export const zSimulerMottakAvKravgrunnlagData = z.object({
    body: z.string(),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zSimulerMottakAvKravgrunnlagResponse = zRessursString;

export const zLagreUtkastVedtaksbrevData = z.object({
    body: zFritekstavsnittDto,
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zLagreUtkastVedtaksbrevResponse = zRessursString;

export const zForhåndsvisBrevData = z.object({
    body: zBestillBrevDto,
    path: z.optional(z.never()),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zForhåndsvisBrevResponse = zRessursByte;

export const zBestillBrevData = z.object({
    body: zBestillBrevDto,
    path: z.optional(z.never()),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zBestillBrevResponse = zRessurs;

export const zHentManuellBrevmottakereData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zHentManuellBrevmottakereResponse = zRessursListManuellBrevmottakerResponsDto;

export const zLeggTilBrevmottakerData = z.object({
    body: zBrevmottaker,
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zLeggTilBrevmottakerResponse = zRessursUuid;

export const zOpprettBrevmottakerStegData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zOpprettBrevmottakerStegResponse = zRessursString;

export const zBeregnBeløpData = z.object({
    body: z.array(zDatoperiode),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zBeregnBeløpResponse = zRessursBeregnetPerioderDto;

export const zOpprettBehandlingData = z.object({
    body: zOpprettTilbakekrevingRequest,
    path: z.optional(z.never()),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zOpprettBehandlingResponse = zRessursString;

export const zOpprettRevurderingData = z.object({
    body: zOpprettRevurderingDto,
    path: z.optional(z.never()),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zOpprettRevurderingResponse = zRessursString;

export const zOpprettBehandlingManuellTaskData = z.object({
    body: zOpprettManueltTilbakekrevingRequest,
    path: z.optional(z.never()),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zOpprettBehandlingManuellTaskResponse = zRessursString;

export const zKanBehandlingOpprettesManueltData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        ytelsestype: z.enum([
            'BARNETRYGD',
            'OVERGANGSSTØNAD',
            'BARNETILSYN',
            'SKOLEPENGER',
            'KONTANTSTØTTE',
        ]),
        eksternFagsakId: z.string(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zKanBehandlingOpprettesManueltResponse = zRessursKanBehandlingOpprettesManueltRespons;

export const zErPerioderLikeData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zErPerioderLikeResponse = zRessursBoolean;

export const zErPerioderSammenslåttData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zErPerioderSammenslåttResponse = zRessursBoolean;

export const zHentInfoData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zHentInfoResponse = zRessursInfo;

export const zHentForvaltningsinfoData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        ytelsestype: z.enum([
            'BARNETRYGD',
            'OVERGANGSSTØNAD',
            'BARNETILSYN',
            'SKOLEPENGER',
            'KONTANTSTØTTE',
            'TILLEGGSSTØNAD',
        ]),
        eksternFagsakId: z.string(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zHentForvaltningsinfoResponse = zRessursListBehandlingsinfo;

export const zHentKravgrunnlagsinfoData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        ytelsestype: z.enum([
            'BARNETRYGD',
            'OVERGANGSSTØNAD',
            'BARNETILSYN',
            'SKOLEPENGER',
            'KONTANTSTØTTE',
        ]),
        eksternFagsakId: z.string(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zHentKravgrunnlagsinfoResponse = zRessursListKravgrunnlagsinfo;

export const zFinnBehandlingerMedGodkjennVedtakOppgaveSomSkulleHattBehandleSakOppgaveData =
    z.object({
        body: z.optional(z.never()),
        path: z.object({
            fagsystem: z.enum(['BA', 'EF', 'KONT', 'IT01', 'TS']),
        }),
        query: z.optional(z.never()),
    });

export const zFeatureTogglesData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFeatureTogglesResponse = zRessursMapStringBoolean;

export const zHentVedtakForFagsystemData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        fagsystem: z.enum(['BA', 'EF', 'KONT', 'IT01', 'TS']),
        eksternFagsakId: z.string(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zHentVedtakForFagsystemResponse = zRessursListFagsystemVedtak;

export const zHentFagsakData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        fagsystem: z.enum(['BA', 'EF', 'KONT', 'IT01', 'TS']),
        eksternFagsakId: z.string(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zHentFagsakResponse = zRessursFagsakDto;

export const zFinnesÅpenTilbakekrevingsbehandlingData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        fagsystem: z.enum(['BA', 'EF', 'KONT', 'IT01', 'TS']),
        eksternFagsakId: z.string(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFinnesÅpenTilbakekrevingsbehandlingResponse = zRessursFinnesBehandlingResponse;

export const zHentBehandlingerForFagsystemData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        fagsystem: z.enum(['BA', 'EF', 'KONT', 'IT01', 'TS']),
        eksternFagsakId: z.string(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zHentBehandlingerForFagsystemResponse = zRessursListBehandling;

export const zHentVedtaksbrevtekstData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zHentVedtaksbrevtekstResponse = zRessursListAvsnitt;

export const zHentUrlTilArbeidOgInntektData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never()),
    headers: z.object({
        'x-person-ident': zPersonIdent,
        'x-fagsak-id': z.optional(z.string()),
        'x-behandling-id': z.optional(z.string()),
    }),
});

/**
 * OK
 */
export const zHentUrlTilArbeidOgInntektResponse = zRessursBrukerlenkeDto;

export const zHentHistorikkinnslagData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zHentHistorikkinnslagResponse = zRessursListHistorikkinnslagDto;

export const zHentTotrinnsvurderingerData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zHentTotrinnsvurderingerResponse = zRessursTotrinnsvurderingDto;

export const zHentJournalposterData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zHentJournalposterResponse = zRessursListJournalpost;

export const zHentDokumentData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
        journalpostId: z.string(),
        dokumentInfoId: z.string(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zHentDokumentResponse = zRessursByte;

export const zHentVurdertForeldelseData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zHentVurdertForeldelseResponse = zRessursVurdertForeldelseDto;

export const zHentFaktaomfeilutbetalingData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zHentFaktaomfeilutbetalingResponse = zRessursFaktaFeilutbetalingDto;

export const zHentInaktivFaktaomfeilutbetalingData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zHentInaktivFaktaomfeilutbetalingResponse = zRessursListFaktaFeilutbetalingDto;

export const zHentBeregningsresultatData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zHentBeregningsresultatResponse = zRessursBeregningsresultatDto;

export const zHentBehandlingData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        behandlingId: z.uuid(),
    }),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zHentBehandlingResponse = zRessursBehandlingDto;
