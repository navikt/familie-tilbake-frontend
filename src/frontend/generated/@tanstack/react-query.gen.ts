// This file is auto-generated by @hey-api/openapi-ts

import type {
    AngreSammenslåingData,
    AngreSammenslåingResponse,
    AngreSendTilBeslutterData,
    AngreSendTilBeslutterResponse,
    AnnulerKravgrunnlagData,
    AnnulerKravgrunnlagResponse,
    ArkiverMottattKravgrunnlagData,
    ArkiverMottattKravgrunnlagResponse,
    BeregnBeløpData,
    BeregnBeløpResponse,
    BestillBrevData,
    BestillBrevResponse,
    ByttEnhetData,
    ByttEnhetResponse,
    ErPerioderLikeData,
    ErPerioderSammenslåttData,
    FeatureTogglesData,
    FerdigstillGodkjenneVedtakOppgaveOgOpprettBehandleSakOppgaveData,
    FerdigstillOppgaverForBehandlingData,
    FinnBehandlingerMedGodkjennVedtakOppgaveSomSkulleHattBehandleSakOppgaveData,
    FinnesÅpenTilbakekrevingsbehandlingData,
    FinnGamleÅpneBehandlingerUtenOppgaveData,
    FjernBrevmottakerStegData,
    FjernBrevmottakerStegResponse,
    FjernManuellBrevmottakerData,
    FjernManuellBrevmottakerResponse,
    FjernVergeData,
    FjernVergeResponse,
    FlyttBehandlingTilFakta1Data,
    FlyttBehandlingTilFakta1Response,
    FlyttBehandlingTilFaktaData,
    FlyttBehandlingTilFaktaResponse,
    ForhåndsvisBrevData,
    ForhåndsvisBrevResponse,
    HenleggBehandlingData,
    HenleggBehandlingResponse,
    HentBehandlingData,
    HentBehandlingerForFagsystemData,
    HentBeregningsresultatData,
    HentDokumentData,
    HentFagsakData,
    HentFaktaomfeilutbetalingData,
    HentForvaltningsinfoData,
    HentHistorikkinnslagData,
    HentInaktivFaktaomfeilutbetalingData,
    HentInfoData,
    HentJournalposterData,
    HentKravgrunnlagsinfoData,
    HentManuellBrevmottakereData,
    HentTotrinnsvurderingerData,
    HentUrlTilArbeidOgInntektData,
    HentVedtakForFagsystemData,
    HentVedtaksbrevtekstData,
    HentVergeData,
    HentVurdertForeldelseData,
    KanBehandlingOpprettesManueltData,
    KorrigerKravgrunnlag1Data,
    KorrigerKravgrunnlag1Response,
    KorrigerKravgrunnlagData,
    KorrigerKravgrunnlagResponse,
    LagOppdaterOppgaveTaskForBehandlingData,
    LagreUtkastVedtaksbrevData,
    LagreUtkastVedtaksbrevResponse,
    LeggTilBrevmottakerData,
    LeggTilBrevmottakerResponse,
    OppdaterManuellBrevmottakerData,
    OppdaterManuellBrevmottakerResponse,
    OpprettBehandlingData,
    OpprettBehandlingManuellTaskData,
    OpprettBehandlingManuellTaskResponse,
    OpprettBehandlingResponse,
    OpprettBrevmottakerStegData,
    OpprettBrevmottakerStegResponse,
    OpprettRevurderingData,
    OpprettRevurderingResponse,
    OpprettVergeStegData,
    OpprettVergeStegResponse,
    SammenslåData,
    SammenslåResponse,
    SendSisteTilstandForBehandlingerTilDvhData,
    SettIverksettStegTilUtførtOgFortsettData,
    SimulerMottakAvKravgrunnlagData,
    SimulerMottakAvKravgrunnlagResponse,
    TaBehandlingAvVentData,
    TaBehandlingAvVentResponse,
    TvingHenleggBehandlingData,
    TvingHenleggBehandlingResponse,
} from '../types.gen';

import { type DefaultError, queryOptions, type UseMutationOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import {
    angreSammenslåing,
    angreSendTilBeslutter,
    annulerKravgrunnlag,
    arkiverMottattKravgrunnlag,
    beregnBeløp,
    bestillBrev,
    byttEnhet,
    erPerioderLike,
    erPerioderSammenslått,
    featureToggles,
    ferdigstillGodkjenneVedtakOppgaveOgOpprettBehandleSakOppgave,
    ferdigstillOppgaverForBehandling,
    finnBehandlingerMedGodkjennVedtakOppgaveSomSkulleHattBehandleSakOppgave,
    finnesÅpenTilbakekrevingsbehandling,
    finnGamleÅpneBehandlingerUtenOppgave,
    fjernBrevmottakerSteg,
    fjernManuellBrevmottaker,
    fjernVerge,
    flyttBehandlingTilFakta,
    flyttBehandlingTilFakta1,
    forhåndsvisBrev,
    henleggBehandling,
    hentBehandling,
    hentBehandlingerForFagsystem,
    hentBeregningsresultat,
    hentDokument,
    hentFagsak,
    hentFaktaomfeilutbetaling,
    hentForvaltningsinfo,
    hentHistorikkinnslag,
    hentInaktivFaktaomfeilutbetaling,
    hentInfo,
    hentJournalposter,
    hentKravgrunnlagsinfo,
    hentManuellBrevmottakere,
    hentTotrinnsvurderinger,
    hentUrlTilArbeidOgInntekt,
    hentVedtakForFagsystem,
    hentVedtaksbrevtekst,
    hentVerge,
    hentVurdertForeldelse,
    kanBehandlingOpprettesManuelt,
    korrigerKravgrunnlag,
    korrigerKravgrunnlag1,
    lagOppdaterOppgaveTaskForBehandling,
    lagreUtkastVedtaksbrev,
    leggTilBrevmottaker,
    oppdaterManuellBrevmottaker,
    opprettBehandling,
    opprettBehandlingManuellTask,
    opprettBrevmottakerSteg,
    opprettRevurdering,
    opprettVergeSteg,
    type Options,
    sammenslå,
    sendSisteTilstandForBehandlingerTilDvh,
    settIverksettStegTilUtførtOgFortsett,
    simulerMottakAvKravgrunnlag,
    taBehandlingAvVent,
    tvingHenleggBehandling,
} from '../sdk.gen';

/**
 * Tvinghenlegg behandling
 */
export const tvingHenleggBehandlingMutation = (
    options?: Partial<Options<TvingHenleggBehandlingData>>
): UseMutationOptions<
    TvingHenleggBehandlingResponse,
    DefaultError,
    Options<TvingHenleggBehandlingData>
> => {
    const mutationOptions: UseMutationOptions<
        TvingHenleggBehandlingResponse,
        DefaultError,
        Options<TvingHenleggBehandlingData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await tvingHenleggBehandling({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Hent korrigert kravgrunnlag
 */
export const korrigerKravgrunnlagMutation = (
    options?: Partial<Options<KorrigerKravgrunnlagData>>
): UseMutationOptions<
    KorrigerKravgrunnlagResponse,
    DefaultError,
    Options<KorrigerKravgrunnlagData>
> => {
    const mutationOptions: UseMutationOptions<
        KorrigerKravgrunnlagResponse,
        DefaultError,
        Options<KorrigerKravgrunnlagData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await korrigerKravgrunnlag({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Hent korrigert kravgrunnlag
 */
export const korrigerKravgrunnlag1Mutation = (
    options?: Partial<Options<KorrigerKravgrunnlag1Data>>
): UseMutationOptions<
    KorrigerKravgrunnlag1Response,
    DefaultError,
    Options<KorrigerKravgrunnlag1Data>
> => {
    const mutationOptions: UseMutationOptions<
        KorrigerKravgrunnlag1Response,
        DefaultError,
        Options<KorrigerKravgrunnlag1Data>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await korrigerKravgrunnlag1({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Flytt behandling tilbake til fakta
 */
export const flyttBehandlingTilFaktaMutation = (
    options?: Partial<Options<FlyttBehandlingTilFaktaData>>
): UseMutationOptions<
    FlyttBehandlingTilFaktaResponse,
    DefaultError,
    Options<FlyttBehandlingTilFaktaData>
> => {
    const mutationOptions: UseMutationOptions<
        FlyttBehandlingTilFaktaResponse,
        DefaultError,
        Options<FlyttBehandlingTilFaktaData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await flyttBehandlingTilFakta({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Arkiver mottatt kravgrunnlag
 */
export const arkiverMottattKravgrunnlagMutation = (
    options?: Partial<Options<ArkiverMottattKravgrunnlagData>>
): UseMutationOptions<
    ArkiverMottattKravgrunnlagResponse,
    DefaultError,
    Options<ArkiverMottattKravgrunnlagData>
> => {
    const mutationOptions: UseMutationOptions<
        ArkiverMottattKravgrunnlagResponse,
        DefaultError,
        Options<ArkiverMottattKravgrunnlagData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await arkiverMottattKravgrunnlag({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Annuler kravgrunnlag
 */
export const annulerKravgrunnlagMutation = (
    options?: Partial<Options<AnnulerKravgrunnlagData>>
): UseMutationOptions<
    AnnulerKravgrunnlagResponse,
    DefaultError,
    Options<AnnulerKravgrunnlagData>
> => {
    const mutationOptions: UseMutationOptions<
        AnnulerKravgrunnlagResponse,
        DefaultError,
        Options<AnnulerKravgrunnlagData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await annulerKravgrunnlag({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Fjerner manuell brevmottaker
 */
export const fjernManuellBrevmottakerMutation = (
    options?: Partial<Options<FjernManuellBrevmottakerData>>
): UseMutationOptions<
    FjernManuellBrevmottakerResponse,
    DefaultError,
    Options<FjernManuellBrevmottakerData>
> => {
    const mutationOptions: UseMutationOptions<
        FjernManuellBrevmottakerResponse,
        DefaultError,
        Options<FjernManuellBrevmottakerData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await fjernManuellBrevmottaker({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Oppdaterer manuell brevmottaker
 */
export const oppdaterManuellBrevmottakerMutation = (
    options?: Partial<Options<OppdaterManuellBrevmottakerData>>
): UseMutationOptions<
    OppdaterManuellBrevmottakerResponse,
    DefaultError,
    Options<OppdaterManuellBrevmottakerData>
> => {
    const mutationOptions: UseMutationOptions<
        OppdaterManuellBrevmottakerResponse,
        DefaultError,
        Options<OppdaterManuellBrevmottakerData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await oppdaterManuellBrevmottaker({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Fjern manuelle brevmottakere og deaktiver steg
 */
export const fjernBrevmottakerStegMutation = (
    options?: Partial<Options<FjernBrevmottakerStegData>>
): UseMutationOptions<
    FjernBrevmottakerStegResponse,
    DefaultError,
    Options<FjernBrevmottakerStegData>
> => {
    const mutationOptions: UseMutationOptions<
        FjernBrevmottakerStegResponse,
        DefaultError,
        Options<FjernBrevmottakerStegData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await fjernBrevmottakerSteg({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Henlegg behandling
 */
export const henleggBehandlingMutation = (
    options?: Partial<Options<HenleggBehandlingData>>
): UseMutationOptions<HenleggBehandlingResponse, DefaultError, Options<HenleggBehandlingData>> => {
    const mutationOptions: UseMutationOptions<
        HenleggBehandlingResponse,
        DefaultError,
        Options<HenleggBehandlingData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await henleggBehandling({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Ta behandling av vent
 */
export const taBehandlingAvVentMutation = (
    options?: Partial<Options<TaBehandlingAvVentData>>
): UseMutationOptions<
    TaBehandlingAvVentResponse,
    DefaultError,
    Options<TaBehandlingAvVentData>
> => {
    const mutationOptions: UseMutationOptions<
        TaBehandlingAvVentResponse,
        DefaultError,
        Options<TaBehandlingAvVentData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await taBehandlingAvVent({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Flytt behandling tilbake til fakta
 */
export const flyttBehandlingTilFakta1Mutation = (
    options?: Partial<Options<FlyttBehandlingTilFakta1Data>>
): UseMutationOptions<
    FlyttBehandlingTilFakta1Response,
    DefaultError,
    Options<FlyttBehandlingTilFakta1Data>
> => {
    const mutationOptions: UseMutationOptions<
        FlyttBehandlingTilFakta1Response,
        DefaultError,
        Options<FlyttBehandlingTilFakta1Data>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await flyttBehandlingTilFakta1({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Bytt enhet
 */
export const byttEnhetMutation = (
    options?: Partial<Options<ByttEnhetData>>
): UseMutationOptions<ByttEnhetResponse, DefaultError, Options<ByttEnhetData>> => {
    const mutationOptions: UseMutationOptions<
        ByttEnhetResponse,
        DefaultError,
        Options<ByttEnhetData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await byttEnhet({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Angre send til beslutter
 */
export const angreSendTilBeslutterMutation = (
    options?: Partial<Options<AngreSendTilBeslutterData>>
): UseMutationOptions<
    AngreSendTilBeslutterResponse,
    DefaultError,
    Options<AngreSendTilBeslutterData>
> => {
    const mutationOptions: UseMutationOptions<
        AngreSendTilBeslutterResponse,
        DefaultError,
        Options<AngreSendTilBeslutterData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await angreSendTilBeslutter({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: readonly string[];
    },
];

const createQueryKey = <TOptions extends Options>(
    id: string,
    options?: TOptions,
    infinite?: boolean,
    tags?: readonly string[]
): [QueryKey<TOptions>[0]] => {
    const params: QueryKey<TOptions>[0] = {
        _id: id,
        baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl,
    } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [params];
};

export const hentVergeQueryKey = (options: Options<HentVergeData>) =>
    createQueryKey('hentVerge', options);

/**
 * Hent verge
 */
export const hentVergeOptions = (options: Options<HentVergeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await hentVerge({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: hentVergeQueryKey(options),
    });
};

/**
 * Opprett verge steg på behandling
 */
export const opprettVergeStegMutation = (
    options?: Partial<Options<OpprettVergeStegData>>
): UseMutationOptions<OpprettVergeStegResponse, DefaultError, Options<OpprettVergeStegData>> => {
    const mutationOptions: UseMutationOptions<
        OpprettVergeStegResponse,
        DefaultError,
        Options<OpprettVergeStegData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await opprettVergeSteg({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Fjern verge
 */
export const fjernVergeMutation = (
    options?: Partial<Options<FjernVergeData>>
): UseMutationOptions<FjernVergeResponse, DefaultError, Options<FjernVergeData>> => {
    const mutationOptions: UseMutationOptions<
        FjernVergeResponse,
        DefaultError,
        Options<FjernVergeData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await fjernVerge({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Oppdatere skalSammenslåPerioder
 */
export const sammenslåMutation = (
    options?: Partial<Options<SammenslåData>>
): UseMutationOptions<SammenslåResponse, DefaultError, Options<SammenslåData>> => {
    const mutationOptions: UseMutationOptions<
        SammenslåResponse,
        DefaultError,
        Options<SammenslåData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await sammenslå({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Angre sammenslå av perioder
 */
export const angreSammenslåingMutation = (
    options?: Partial<Options<AngreSammenslåingData>>
): UseMutationOptions<AngreSammenslåingResponse, DefaultError, Options<AngreSammenslåingData>> => {
    const mutationOptions: UseMutationOptions<
        AngreSammenslåingResponse,
        DefaultError,
        Options<AngreSammenslåingData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await angreSammenslåing({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Manuellt ufører iverksettingssteget uten å sende til oppdrag
 */
export const settIverksettStegTilUtførtOgFortsettMutation = (
    options?: Partial<Options<SettIverksettStegTilUtførtOgFortsettData>>
): UseMutationOptions<unknown, DefaultError, Options<SettIverksettStegTilUtførtOgFortsettData>> => {
    const mutationOptions: UseMutationOptions<
        unknown,
        DefaultError,
        Options<SettIverksettStegTilUtførtOgFortsettData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await settIverksettStegTilUtførtOgFortsett({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Send siste tilstand for behandling til DVH
 */
export const sendSisteTilstandForBehandlingerTilDvhMutation = (
    options?: Partial<Options<SendSisteTilstandForBehandlingerTilDvhData>>
): UseMutationOptions<
    unknown,
    DefaultError,
    Options<SendSisteTilstandForBehandlingerTilDvhData>
> => {
    const mutationOptions: UseMutationOptions<
        unknown,
        DefaultError,
        Options<SendSisteTilstandForBehandlingerTilDvhData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await sendSisteTilstandForBehandlingerTilDvh({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Lag oppdaterOppgaveTask for behandling
 */
export const lagOppdaterOppgaveTaskForBehandlingMutation = (
    options?: Partial<Options<LagOppdaterOppgaveTaskForBehandlingData>>
): UseMutationOptions<unknown, DefaultError, Options<LagOppdaterOppgaveTaskForBehandlingData>> => {
    const mutationOptions: UseMutationOptions<
        unknown,
        DefaultError,
        Options<LagOppdaterOppgaveTaskForBehandlingData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await lagOppdaterOppgaveTaskForBehandling({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Oppretter FinnGammelBehandlingUtenOppgaveTask som logger ut gamle behandlinger uten åpen oppgave
 */
export const finnGamleÅpneBehandlingerUtenOppgaveMutation = (
    options?: Partial<Options<FinnGamleÅpneBehandlingerUtenOppgaveData>>
): UseMutationOptions<unknown, DefaultError, Options<FinnGamleÅpneBehandlingerUtenOppgaveData>> => {
    const mutationOptions: UseMutationOptions<
        unknown,
        DefaultError,
        Options<FinnGamleÅpneBehandlingerUtenOppgaveData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await finnGamleÅpneBehandlingerUtenOppgave({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Ferdigstiller åpen oppgave som skulle vært lukket i en behandling
 */
export const ferdigstillOppgaverForBehandlingMutation = (
    options?: Partial<Options<FerdigstillOppgaverForBehandlingData>>
): UseMutationOptions<unknown, DefaultError, Options<FerdigstillOppgaverForBehandlingData>> => {
    const mutationOptions: UseMutationOptions<
        unknown,
        DefaultError,
        Options<FerdigstillOppgaverForBehandlingData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await ferdigstillOppgaverForBehandling({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Ferdigstiller åpen GodkjenneVedtak-oppgave og oppretter BehandleSak-oppgave for behandlinger
 */
export const ferdigstillGodkjenneVedtakOppgaveOgOpprettBehandleSakOppgaveMutation = (
    options?: Partial<Options<FerdigstillGodkjenneVedtakOppgaveOgOpprettBehandleSakOppgaveData>>
): UseMutationOptions<
    unknown,
    DefaultError,
    Options<FerdigstillGodkjenneVedtakOppgaveOgOpprettBehandleSakOppgaveData>
> => {
    const mutationOptions: UseMutationOptions<
        unknown,
        DefaultError,
        Options<FerdigstillGodkjenneVedtakOppgaveOgOpprettBehandleSakOppgaveData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await ferdigstillGodkjenneVedtakOppgaveOgOpprettBehandleSakOppgave({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Legg inn test-kravgrunnlag - KUN PREPROD/DEV!
 *
 * Legg inn behandlingId (intern id) fra tilbakekrevingsbehandlingen (ikke eksternid fra url).
 *
 * Legg inn et kravgrunnlag du vil bruke.
 *
 * Kopier et eksisterende kravgrunnlag og bytt ut MINIMUM:
 *
 * - fagsystemId (ekstern fagsakId - long)
 *
 * - referanse (ekstern behandlingId - long)
 *
 * Dette er eksternider fra vedtaksløsning som f.eks. ef-sak eller ba-sak.
 *
 * Endre personident i kravgrunnlag, med feltnavn: typeGjelderId og typeUtbetId
 *
 * Det vil ikke fungere å iverksette mot økonomi, men du kan bruke forvaltningsendepunkt: "settIverksettingUtfort" - da lages brev og behandlingen settes til AVSLUTTET. settIverksettingUtfort tar taskId og behandlingId (intern i familie-tilbake) som parameter. TaskId kan finnes på task i prosessering, tasken heter SendØkonomiVedtak og vil være ha status som klar til plukk eller feilet.
 */
export const simulerMottakAvKravgrunnlagMutation = (
    options?: Partial<Options<SimulerMottakAvKravgrunnlagData>>
): UseMutationOptions<
    SimulerMottakAvKravgrunnlagResponse,
    DefaultError,
    Options<SimulerMottakAvKravgrunnlagData>
> => {
    const mutationOptions: UseMutationOptions<
        SimulerMottakAvKravgrunnlagResponse,
        DefaultError,
        Options<SimulerMottakAvKravgrunnlagData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await simulerMottakAvKravgrunnlag({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Lagre utkast av vedtaksbrev
 */
export const lagreUtkastVedtaksbrevMutation = (
    options?: Partial<Options<LagreUtkastVedtaksbrevData>>
): UseMutationOptions<
    LagreUtkastVedtaksbrevResponse,
    DefaultError,
    Options<LagreUtkastVedtaksbrevData>
> => {
    const mutationOptions: UseMutationOptions<
        LagreUtkastVedtaksbrevResponse,
        DefaultError,
        Options<LagreUtkastVedtaksbrevData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await lagreUtkastVedtaksbrev({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Forhåndsvis brev
 */
export const forhåndsvisBrevMutation = (
    options?: Partial<Options<ForhåndsvisBrevData>>
): UseMutationOptions<ForhåndsvisBrevResponse, DefaultError, Options<ForhåndsvisBrevData>> => {
    const mutationOptions: UseMutationOptions<
        ForhåndsvisBrevResponse,
        DefaultError,
        Options<ForhåndsvisBrevData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await forhåndsvisBrev({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Bestill brevsending
 */
export const bestillBrevMutation = (
    options?: Partial<Options<BestillBrevData>>
): UseMutationOptions<BestillBrevResponse, DefaultError, Options<BestillBrevData>> => {
    const mutationOptions: UseMutationOptions<
        BestillBrevResponse,
        DefaultError,
        Options<BestillBrevData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await bestillBrev({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const hentManuellBrevmottakereQueryKey = (options: Options<HentManuellBrevmottakereData>) =>
    createQueryKey('hentManuellBrevmottakere', options);

/**
 * Henter manuell brevmottakere
 */
export const hentManuellBrevmottakereOptions = (options: Options<HentManuellBrevmottakereData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await hentManuellBrevmottakere({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: hentManuellBrevmottakereQueryKey(options),
    });
};

/**
 * Legger til brevmottaker manuelt
 */
export const leggTilBrevmottakerMutation = (
    options?: Partial<Options<LeggTilBrevmottakerData>>
): UseMutationOptions<
    LeggTilBrevmottakerResponse,
    DefaultError,
    Options<LeggTilBrevmottakerData>
> => {
    const mutationOptions: UseMutationOptions<
        LeggTilBrevmottakerResponse,
        DefaultError,
        Options<LeggTilBrevmottakerData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await leggTilBrevmottaker({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Opprett og aktiver brevmottaker-steg på behandling
 */
export const opprettBrevmottakerStegMutation = (
    options?: Partial<Options<OpprettBrevmottakerStegData>>
): UseMutationOptions<
    OpprettBrevmottakerStegResponse,
    DefaultError,
    Options<OpprettBrevmottakerStegData>
> => {
    const mutationOptions: UseMutationOptions<
        OpprettBrevmottakerStegResponse,
        DefaultError,
        Options<OpprettBrevmottakerStegData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await opprettBrevmottakerSteg({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Beregn feilutbetalt beløp for nye delte perioder
 */
export const beregnBeløpMutation = (
    options?: Partial<Options<BeregnBeløpData>>
): UseMutationOptions<BeregnBeløpResponse, DefaultError, Options<BeregnBeløpData>> => {
    const mutationOptions: UseMutationOptions<
        BeregnBeløpResponse,
        DefaultError,
        Options<BeregnBeløpData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await beregnBeløp({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Opprett tilbakekrevingsbehandling automatisk, kan kalles av fagsystem, batch
 */
export const opprettBehandlingMutation = (
    options?: Partial<Options<OpprettBehandlingData>>
): UseMutationOptions<OpprettBehandlingResponse, DefaultError, Options<OpprettBehandlingData>> => {
    const mutationOptions: UseMutationOptions<
        OpprettBehandlingResponse,
        DefaultError,
        Options<OpprettBehandlingData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await opprettBehandling({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Opprett tilbakekrevingsrevurdering
 */
export const opprettRevurderingMutation = (
    options?: Partial<Options<OpprettRevurderingData>>
): UseMutationOptions<
    OpprettRevurderingResponse,
    DefaultError,
    Options<OpprettRevurderingData>
> => {
    const mutationOptions: UseMutationOptions<
        OpprettRevurderingResponse,
        DefaultError,
        Options<OpprettRevurderingData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await opprettRevurdering({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

/**
 * Opprett tilbakekrevingsbehandling manuelt
 */
export const opprettBehandlingManuellTaskMutation = (
    options?: Partial<Options<OpprettBehandlingManuellTaskData>>
): UseMutationOptions<
    OpprettBehandlingManuellTaskResponse,
    DefaultError,
    Options<OpprettBehandlingManuellTaskData>
> => {
    const mutationOptions: UseMutationOptions<
        OpprettBehandlingManuellTaskResponse,
        DefaultError,
        Options<OpprettBehandlingManuellTaskData>
    > = {
        mutationFn: async fnOptions => {
            const { data } = await opprettBehandlingManuellTask({
                ...options,
                ...fnOptions,
                throwOnError: true,
            });
            return data;
        },
    };
    return mutationOptions;
};

export const kanBehandlingOpprettesManueltQueryKey = (
    options: Options<KanBehandlingOpprettesManueltData>
) => createQueryKey('kanBehandlingOpprettesManuelt', options);

/**
 * Sjekk om det er mulig å opprette behandling manuelt
 */
export const kanBehandlingOpprettesManueltOptions = (
    options: Options<KanBehandlingOpprettesManueltData>
) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await kanBehandlingOpprettesManuelt({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: kanBehandlingOpprettesManueltQueryKey(options),
    });
};

export const erPerioderLikeQueryKey = (options: Options<ErPerioderLikeData>) =>
    createQueryKey('erPerioderLike', options);

/**
 * Sjekker om perioder er like - unntatt dato og beløp
 */
export const erPerioderLikeOptions = (options: Options<ErPerioderLikeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await erPerioderLike({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: erPerioderLikeQueryKey(options),
    });
};

export const erPerioderSammenslåttQueryKey = (options: Options<ErPerioderSammenslåttData>) =>
    createQueryKey('erPerioderSammenslått', options);

/**
 * Sjekker om perioder er sammenslått
 */
export const erPerioderSammenslåttOptions = (options: Options<ErPerioderSammenslåttData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await erPerioderSammenslått({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: erPerioderSammenslåttQueryKey(options),
    });
};

export const hentInfoQueryKey = (options?: Options<HentInfoData>) =>
    createQueryKey('hentInfo', options);

/**
 * Hent applikasjonsinformasjon
 */
export const hentInfoOptions = (options?: Options<HentInfoData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await hentInfo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: hentInfoQueryKey(options),
    });
};

export const hentForvaltningsinfoQueryKey = (options: Options<HentForvaltningsinfoData>) =>
    createQueryKey('hentForvaltningsinfo', options);

/**
 * Hent informasjon som kreves for forvaltning
 */
export const hentForvaltningsinfoOptions = (options: Options<HentForvaltningsinfoData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await hentForvaltningsinfo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: hentForvaltningsinfoQueryKey(options),
    });
};

export const hentKravgrunnlagsinfoQueryKey = (options: Options<HentKravgrunnlagsinfoData>) =>
    createQueryKey('hentKravgrunnlagsinfo', options);

/**
 * Hent ikke arkiverte kravgrunnlag
 */
export const hentKravgrunnlagsinfoOptions = (options: Options<HentKravgrunnlagsinfoData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await hentKravgrunnlagsinfo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: hentKravgrunnlagsinfoQueryKey(options),
    });
};

export const finnBehandlingerMedGodkjennVedtakOppgaveSomSkulleHattBehandleSakOppgaveQueryKey = (
    options: Options<FinnBehandlingerMedGodkjennVedtakOppgaveSomSkulleHattBehandleSakOppgaveData>
) =>
    createQueryKey(
        'finnBehandlingerMedGodkjennVedtakOppgaveSomSkulleHattBehandleSakOppgave',
        options
    );

/**
 * Henter behandlinger med åpen GodkjennVedtak-oppgave eller ingen oppgave, som burde hatt åpen BehandleSak-oppgave
 */
export const finnBehandlingerMedGodkjennVedtakOppgaveSomSkulleHattBehandleSakOppgaveOptions = (
    options: Options<FinnBehandlingerMedGodkjennVedtakOppgaveSomSkulleHattBehandleSakOppgaveData>
) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } =
                await finnBehandlingerMedGodkjennVedtakOppgaveSomSkulleHattBehandleSakOppgave({
                    ...options,
                    ...queryKey[0],
                    signal,
                    throwOnError: true,
                });
            return data;
        },
        queryKey:
            finnBehandlingerMedGodkjennVedtakOppgaveSomSkulleHattBehandleSakOppgaveQueryKey(
                options
            ),
    });
};

export const featureTogglesQueryKey = (options?: Options<FeatureTogglesData>) =>
    createQueryKey('featureToggles', options);

export const featureTogglesOptions = (options?: Options<FeatureTogglesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await featureToggles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: featureTogglesQueryKey(options),
    });
};

export const hentVedtakForFagsystemQueryKey = (options: Options<HentVedtakForFagsystemData>) =>
    createQueryKey('hentVedtakForFagsystem', options);

/**
 * Hent behandlinger, kalles av fagsystem
 */
export const hentVedtakForFagsystemOptions = (options: Options<HentVedtakForFagsystemData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await hentVedtakForFagsystem({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: hentVedtakForFagsystemQueryKey(options),
    });
};

export const hentFagsakQueryKey = (options: Options<HentFagsakData>) =>
    createQueryKey('hentFagsak', options);

/**
 * Hent fagsak informasjon med bruker og behandlinger
 */
export const hentFagsakOptions = (options: Options<HentFagsakData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await hentFagsak({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: hentFagsakQueryKey(options),
    });
};

export const finnesÅpenTilbakekrevingsbehandlingQueryKey = (
    options: Options<FinnesÅpenTilbakekrevingsbehandlingData>
) => createQueryKey('finnesÅpenTilbakekrevingsbehandling', options);

/**
 * Sjekk om det finnes en åpen tilbakekrevingsbehandling
 */
export const finnesÅpenTilbakekrevingsbehandlingOptions = (
    options: Options<FinnesÅpenTilbakekrevingsbehandlingData>
) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await finnesÅpenTilbakekrevingsbehandling({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: finnesÅpenTilbakekrevingsbehandlingQueryKey(options),
    });
};

export const hentBehandlingerForFagsystemQueryKey = (
    options: Options<HentBehandlingerForFagsystemData>
) => createQueryKey('hentBehandlingerForFagsystem', options);

/**
 * Hent behandlinger, kalles av fagsystem
 */
export const hentBehandlingerForFagsystemOptions = (
    options: Options<HentBehandlingerForFagsystemData>
) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await hentBehandlingerForFagsystem({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: hentBehandlingerForFagsystemQueryKey(options),
    });
};

export const hentVedtaksbrevtekstQueryKey = (options: Options<HentVedtaksbrevtekstData>) =>
    createQueryKey('hentVedtaksbrevtekst', options);

/**
 * Hent vedtaksbrevtekst
 */
export const hentVedtaksbrevtekstOptions = (options: Options<HentVedtaksbrevtekstData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await hentVedtaksbrevtekst({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: hentVedtaksbrevtekstQueryKey(options),
    });
};

export const hentUrlTilArbeidOgInntektQueryKey = (
    options: Options<HentUrlTilArbeidOgInntektData>
) => createQueryKey('hentUrlTilArbeidOgInntekt', options);

export const hentUrlTilArbeidOgInntektOptions = (
    options: Options<HentUrlTilArbeidOgInntektData>
) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await hentUrlTilArbeidOgInntekt({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: hentUrlTilArbeidOgInntektQueryKey(options),
    });
};

export const hentHistorikkinnslagQueryKey = (options: Options<HentHistorikkinnslagData>) =>
    createQueryKey('hentHistorikkinnslag', options);

export const hentHistorikkinnslagOptions = (options: Options<HentHistorikkinnslagData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await hentHistorikkinnslag({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: hentHistorikkinnslagQueryKey(options),
    });
};

export const hentTotrinnsvurderingerQueryKey = (options: Options<HentTotrinnsvurderingerData>) =>
    createQueryKey('hentTotrinnsvurderinger', options);

/**
 * Hent totrinnsvurderinger
 */
export const hentTotrinnsvurderingerOptions = (options: Options<HentTotrinnsvurderingerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await hentTotrinnsvurderinger({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: hentTotrinnsvurderingerQueryKey(options),
    });
};

export const hentJournalposterQueryKey = (options: Options<HentJournalposterData>) =>
    createQueryKey('hentJournalposter', options);

/**
 * Hent journalpost informasjon
 */
export const hentJournalposterOptions = (options: Options<HentJournalposterData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await hentJournalposter({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: hentJournalposterQueryKey(options),
    });
};

export const hentDokumentQueryKey = (options: Options<HentDokumentData>) =>
    createQueryKey('hentDokument', options);

/**
 * Hent dokument fra journalføring
 */
export const hentDokumentOptions = (options: Options<HentDokumentData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await hentDokument({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: hentDokumentQueryKey(options),
    });
};

export const hentVurdertForeldelseQueryKey = (options: Options<HentVurdertForeldelseData>) =>
    createQueryKey('hentVurdertForeldelse', options);

/**
 * Hent foreldelsesinformasjon
 */
export const hentVurdertForeldelseOptions = (options: Options<HentVurdertForeldelseData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await hentVurdertForeldelse({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: hentVurdertForeldelseQueryKey(options),
    });
};

export const hentFaktaomfeilutbetalingQueryKey = (
    options: Options<HentFaktaomfeilutbetalingData>
) => createQueryKey('hentFaktaomfeilutbetaling', options);

/**
 * Hent fakta om feilutbetaling
 */
export const hentFaktaomfeilutbetalingOptions = (
    options: Options<HentFaktaomfeilutbetalingData>
) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await hentFaktaomfeilutbetaling({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: hentFaktaomfeilutbetalingQueryKey(options),
    });
};

export const hentInaktivFaktaomfeilutbetalingQueryKey = (
    options: Options<HentInaktivFaktaomfeilutbetalingData>
) => createQueryKey('hentInaktivFaktaomfeilutbetaling', options);

/**
 * Hent inaktive fakta om feilutbetalinger
 */
export const hentInaktivFaktaomfeilutbetalingOptions = (
    options: Options<HentInaktivFaktaomfeilutbetalingData>
) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await hentInaktivFaktaomfeilutbetaling({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: hentInaktivFaktaomfeilutbetalingQueryKey(options),
    });
};

export const hentBeregningsresultatQueryKey = (options: Options<HentBeregningsresultatData>) =>
    createQueryKey('hentBeregningsresultat', options);

/**
 * Hent beregningsresultat
 */
export const hentBeregningsresultatOptions = (options: Options<HentBeregningsresultatData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await hentBeregningsresultat({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: hentBeregningsresultatQueryKey(options),
    });
};

export const hentBehandlingQueryKey = (options: Options<HentBehandlingData>) =>
    createQueryKey('hentBehandling', options);

/**
 * Hent behandling
 */
export const hentBehandlingOptions = (options: Options<HentBehandlingData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await hentBehandling({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true,
            });
            return data;
        },
        queryKey: hentBehandlingQueryKey(options),
    });
};
